
RTOS_A8_Tickless_Low_Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005060  08005060  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005060  08005060  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005060  08005060  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b60  20000060  080050c8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bc0  080050c8  00021bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015260  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dc5  00000000  00000000  00035333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  000380f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec2  00000000  00000000  00039420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cd3  00000000  00000000  0003a2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e19  00000000  00000000  0003cfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d2c  00000000  00000000  00050dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005328  00000000  00000000  00147afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0014ce24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fc8 	.word	0x08004fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004fc8 	.word	0x08004fc8

080001d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	db0b      	blt.n	80001fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f003 021f 	and.w	r2, r3, #31
 80001e8:	4907      	ldr	r1, [pc, #28]	; (8000208 <__NVIC_EnableIRQ+0x38>)
 80001ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ee:	095b      	lsrs	r3, r3, #5
 80001f0:	2001      	movs	r0, #1
 80001f2:	fa00 f202 	lsl.w	r2, r0, r2
 80001f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	e000e100 	.word	0xe000e100

0800020c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	6039      	str	r1, [r7, #0]
 8000216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021c:	2b00      	cmp	r3, #0
 800021e:	db0a      	blt.n	8000236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	b2da      	uxtb	r2, r3
 8000224:	490c      	ldr	r1, [pc, #48]	; (8000258 <__NVIC_SetPriority+0x4c>)
 8000226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022a:	0112      	lsls	r2, r2, #4
 800022c:	b2d2      	uxtb	r2, r2
 800022e:	440b      	add	r3, r1
 8000230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000234:	e00a      	b.n	800024c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	b2da      	uxtb	r2, r3
 800023a:	4908      	ldr	r1, [pc, #32]	; (800025c <__NVIC_SetPriority+0x50>)
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	f003 030f 	and.w	r3, r3, #15
 8000242:	3b04      	subs	r3, #4
 8000244:	0112      	lsls	r2, r2, #4
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	440b      	add	r3, r1
 800024a:	761a      	strb	r2, [r3, #24]
}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr
 8000258:	e000e100 	.word	0xe000e100
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <TaskWait>:
void StartDefaultTask(void *argument);



void TaskWait(void *argument)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		xSemaphoreGive(semaphore);
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <TaskWait+0x20>)
 800026a:	6818      	ldr	r0, [r3, #0]
 800026c:	2300      	movs	r3, #0
 800026e:	2200      	movs	r2, #0
 8000270:	2100      	movs	r1, #0
 8000272:	f001 fee5 	bl	8002040 <xQueueGenericSend>
		vTaskDelay(WAIT_TIME/portTICK_PERIOD_MS);
 8000276:	f241 3088 	movw	r0, #5000	; 0x1388
 800027a:	f002 fe31 	bl	8002ee0 <vTaskDelay>
		xSemaphoreGive(semaphore);
 800027e:	e7f3      	b.n	8000268 <TaskWait+0x8>
 8000280:	20000084 	.word	0x20000084

08000284 <TaskToggleFiveTimes>:
	}
}


void TaskToggleFiveTimes(void *argument)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		// block for 150 ms (sleeping for 100ms)
		if (xSemaphoreTake(semaphore, portMAX_DELAY) == pdPASS) {
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <TaskToggleFiveTimes+0x58>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f04f 31ff 	mov.w	r1, #4294967295
 8000294:	4618      	mov	r0, r3
 8000296:	f002 f9d9 	bl	800264c <xQueueSemaphoreTake>
 800029a:	4603      	mov	r3, r0
 800029c:	2b01      	cmp	r3, #1
 800029e:	d1f5      	bne.n	800028c <TaskToggleFiveTimes+0x8>

			GPIOA->ODR |= GPIO_ODR_OD5;
 80002a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6153      	str	r3, [r2, #20]
			for (int i = 0; i < 9; i++){
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	e00d      	b.n	80002d2 <TaskToggleFiveTimes+0x4e>
				vTaskDelay(BLINK_TIME / portTICK_PERIOD_MS);
 80002b6:	2080      	movs	r0, #128	; 0x80
 80002b8:	f002 fe12 	bl	8002ee0 <vTaskDelay>
				GPIOA->ODR ^= GPIO_ODR_OD5;
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c6:	f083 0320 	eor.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]
			for (int i = 0; i < 9; i++){
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	3301      	adds	r3, #1
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	2b08      	cmp	r3, #8
 80002d6:	ddee      	ble.n	80002b6 <TaskToggleFiveTimes+0x32>
		if (xSemaphoreTake(semaphore, portMAX_DELAY) == pdPASS) {
 80002d8:	e7d8      	b.n	800028c <TaskToggleFiveTimes+0x8>
 80002da:	bf00      	nop
 80002dc:	20000084 	.word	0x20000084

080002e0 <EXTI15_10_IRQHandler>:
	}

}

void EXTI15_10_IRQHandler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
    // Check if the interrupt was triggered by EXTI13
    if (EXTI->PR1 & EXTI_PR1_PIF13)
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <EXTI15_10_IRQHandler+0x50>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d019      	beq.n	8000326 <EXTI15_10_IRQHandler+0x46>
    {
        // Clear the pending bit by writing 1 to it
        EXTI->PR1 |= EXTI_PR1_PIF13;
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <EXTI15_10_IRQHandler+0x50>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <EXTI15_10_IRQHandler+0x50>)
 80002f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002fc:	6153      	str	r3, [r2, #20]


    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <EXTI15_10_IRQHandler+0x54>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	1d3a      	adds	r2, r7, #4
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f002 f831 	bl	8002372 <xQueueGiveFromISR>
    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d007      	beq.n	8000326 <EXTI15_10_IRQHandler+0x46>
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <EXTI15_10_IRQHandler+0x58>)
 8000318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	f3bf 8f4f 	dsb	sy
 8000322:	f3bf 8f6f 	isb	sy


        // Your custom interrupt handling code here
    }
}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010400 	.word	0x40010400
 8000334:	20000084 	.word	0x20000084
 8000338:	e000ed04 	.word	0xe000ed04

0800033c <main>:


int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af02      	add	r7, sp, #8

  HAL_Init();
 8000342:	f000 f9f8 	bl	8000736 <HAL_Init>
  SystemClock_Config();
 8000346:	f000 f8a7 	bl	8000498 <SystemClock_Config>

  // Enable the clock for GPIOC
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 800034a:	4b48      	ldr	r3, [pc, #288]	; (800046c <main+0x130>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	4a47      	ldr	r2, [pc, #284]	; (800046c <main+0x130>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Enable the clock for SYSCFG
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000356:	4b45      	ldr	r3, [pc, #276]	; (800046c <main+0x130>)
 8000358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800035a:	4a44      	ldr	r2, [pc, #272]	; (800046c <main+0x130>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6613      	str	r3, [r2, #96]	; 0x60

  // Set PC13 to input mode
  GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 8000362:	4b43      	ldr	r3, [pc, #268]	; (8000470 <main+0x134>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a42      	ldr	r2, [pc, #264]	; (8000470 <main+0x134>)
 8000368:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800036c:	6013      	str	r3, [r2, #0]

  // Select the source input for the EXTI13 external interrupt (PC13)
  SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI13);
 800036e:	4b41      	ldr	r3, [pc, #260]	; (8000474 <main+0x138>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a40      	ldr	r2, [pc, #256]	; (8000474 <main+0x138>)
 8000374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000378:	6153      	str	r3, [r2, #20]
  SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 800037a:	4b3e      	ldr	r3, [pc, #248]	; (8000474 <main+0x138>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a3d      	ldr	r2, [pc, #244]	; (8000474 <main+0x138>)
 8000380:	f043 0320 	orr.w	r3, r3, #32
 8000384:	6153      	str	r3, [r2, #20]

  // Configure EXTI13 to trigger on rising edge
  EXTI->RTSR1 |= EXTI_RTSR1_RT13;
 8000386:	4b3c      	ldr	r3, [pc, #240]	; (8000478 <main+0x13c>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	4a3b      	ldr	r2, [pc, #236]	; (8000478 <main+0x13c>)
 800038c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000390:	6093      	str	r3, [r2, #8]

  // Enable interrupt request from line 13
  EXTI->IMR1 |= EXTI_IMR1_IM13;
 8000392:	4b39      	ldr	r3, [pc, #228]	; (8000478 <main+0x13c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a38      	ldr	r2, [pc, #224]	; (8000478 <main+0x13c>)
 8000398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800039c:	6013      	str	r3, [r2, #0]

  // Set priority for EXTI15_10 interrupt (covers EXTI lines 10 to 15)
  NVIC_SetPriority(EXTI15_10_IRQn, 6);
 800039e:	2106      	movs	r1, #6
 80003a0:	2028      	movs	r0, #40	; 0x28
 80003a2:	f7ff ff33 	bl	800020c <__NVIC_SetPriority>

  // Enable EXTI15_10 interrupt in NVIC
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a6:	2028      	movs	r0, #40	; 0x28
 80003a8:	f7ff ff12 	bl	80001d0 <__NVIC_EnableIRQ>


  // Configure PA5 for LED output
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80003ac:	4b2f      	ldr	r3, [pc, #188]	; (800046c <main+0x130>)
 80003ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b0:	4a2e      	ldr	r2, [pc, #184]	; (800046c <main+0x130>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  GPIOA->MODER   &= ~(GPIO_MODER_MODE5);
 80003b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80003c6:	6013      	str	r3, [r2, #0]
  GPIOA->MODER   |=  (1 << GPIO_MODER_MODE5_Pos);
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003d6:	6013      	str	r3, [r2, #0]
  GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);
 80003d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80003e6:	6093      	str	r3, [r2, #8]
  GPIOA->OTYPER  &= ~(GPIO_OTYPER_OT5);
 80003e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f2:	f023 0320 	bic.w	r3, r3, #32
 80003f6:	6053      	str	r3, [r2, #4]
  GPIOA->ODR     &= ~(GPIO_PIN_5);
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000402:	f023 0320 	bic.w	r3, r3, #32
 8000406:	6153      	str	r3, [r2, #20]


  // Create the tasks

  	BaseType_t retVal;
    retVal = xTaskCreate(TaskWait, "TaskWait", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 6, &TaskWaitHandler);
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <main+0x140>)
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	2306      	movs	r3, #6
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2300      	movs	r3, #0
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	491a      	ldr	r1, [pc, #104]	; (8000480 <main+0x144>)
 8000416:	481b      	ldr	r0, [pc, #108]	; (8000484 <main+0x148>)
 8000418:	f002 fc07 	bl	8002c2a <xTaskCreate>
 800041c:	6078      	str	r0, [r7, #4]
    if (retVal != pdPASS) { while(1);}	// check if task creation failed
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d000      	beq.n	8000426 <main+0xea>
 8000424:	e7fe      	b.n	8000424 <main+0xe8>

    retVal = xTaskCreate(TaskToggleFiveTimes, "TaskToggleFiveTimes", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, &TaskToggleFiveTimesHandler);
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <main+0x14c>)
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	2304      	movs	r3, #4
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	4916      	ldr	r1, [pc, #88]	; (800048c <main+0x150>)
 8000434:	4816      	ldr	r0, [pc, #88]	; (8000490 <main+0x154>)
 8000436:	f002 fbf8 	bl	8002c2a <xTaskCreate>
 800043a:	6078      	str	r0, [r7, #4]
    if (retVal != pdPASS) { while(1);}	// check if task creation failed
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d000      	beq.n	8000444 <main+0x108>
 8000442:	e7fe      	b.n	8000442 <main+0x106>

    // Create Semaphores for TaskToggleFiveTimes and task3
    semaphore = xSemaphoreCreateBinary();
 8000444:	2203      	movs	r2, #3
 8000446:	2100      	movs	r1, #0
 8000448:	2001      	movs	r0, #1
 800044a:	f001 fd9b 	bl	8001f84 <xQueueGenericCreate>
 800044e:	4603      	mov	r3, r0
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <main+0x158>)
 8000452:	6013      	str	r3, [r2, #0]
    if (semaphore == NULL) { while(1); }
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <main+0x158>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d100      	bne.n	800045e <main+0x122>
 800045c:	e7fe      	b.n	800045c <main+0x120>

    // Start scheduler
    vTaskStartScheduler();
 800045e:	f002 fd73 	bl	8002f48 <vTaskStartScheduler>
 8000462:	2300      	movs	r3, #0

}
 8000464:	4618      	mov	r0, r3
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	48000800 	.word	0x48000800
 8000474:	40010000 	.word	0x40010000
 8000478:	40010400 	.word	0x40010400
 800047c:	2000007c 	.word	0x2000007c
 8000480:	08004fe0 	.word	0x08004fe0
 8000484:	08000261 	.word	0x08000261
 8000488:	20000080 	.word	0x20000080
 800048c:	08004fec 	.word	0x08004fec
 8000490:	08000285 	.word	0x08000285
 8000494:	20000084 	.word	0x20000084

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b096      	sub	sp, #88	; 0x58
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	2244      	movs	r2, #68	; 0x44
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f004 fca4 	bl	8004df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	463b      	mov	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004be:	f000 fa63 	bl	8000988 <HAL_PWREx_ControlVoltageScaling>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004c8:	f000 f83e 	bl	8000548 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004cc:	2310      	movs	r3, #16
 80004ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004d0:	2301      	movs	r3, #1
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004d8:	2360      	movs	r3, #96	; 0x60
 80004da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004dc:	2300      	movs	r3, #0
 80004de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 faa5 	bl	8000a34 <HAL_RCC_OscConfig>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004f0:	f000 f82a 	bl	8000548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f4:	230f      	movs	r3, #15
 80004f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004f8:	2300      	movs	r3, #0
 80004fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000508:	463b      	mov	r3, r7
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fe6d 	bl	80011ec <HAL_RCC_ClockConfig>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000518:	f000 f816 	bl	8000548 <Error_Handler>
  }
}
 800051c:	bf00      	nop
 800051e:	3758      	adds	r7, #88	; 0x58
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d101      	bne.n	800053a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000536:	f000 f917 	bl	8000768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40014400 	.word	0x40014400

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	e7fe      	b.n	8000550 <Error_Handler+0x8>
	...

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <HAL_MspInit+0x4c>)
 800055c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055e:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <HAL_MspInit+0x4c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6613      	str	r3, [r2, #96]	; 0x60
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_MspInit+0x4c>)
 8000568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <HAL_MspInit+0x4c>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <HAL_MspInit+0x4c>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	6593      	str	r3, [r2, #88]	; 0x58
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_MspInit+0x4c>)
 8000580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	210f      	movs	r1, #15
 800058e:	f06f 0001 	mvn.w	r0, #1
 8000592:	f000 f9c1 	bl	8000918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <HAL_InitTick+0xc8>)
 80005b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b6:	4a2d      	ldr	r2, [pc, #180]	; (800066c <HAL_InitTick+0xc8>)
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005bc:	6613      	str	r3, [r2, #96]	; 0x60
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <HAL_InitTick+0xc8>)
 80005c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ca:	f107 020c 	add.w	r2, r7, #12
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 ffb7 	bl	8001548 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005da:	f000 ff9f 	bl	800151c <HAL_RCC_GetPCLK2Freq>
 80005de:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e2:	4a23      	ldr	r2, [pc, #140]	; (8000670 <HAL_InitTick+0xcc>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	0c9b      	lsrs	r3, r3, #18
 80005ea:	3b01      	subs	r3, #1
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <HAL_InitTick+0xd0>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <HAL_InitTick+0xd4>)
 80005f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <HAL_InitTick+0xd0>)
 80005f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005fa:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80005fc:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <HAL_InitTick+0xd0>)
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <HAL_InitTick+0xd0>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <HAL_InitTick+0xd0>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <HAL_InitTick+0xd0>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8000614:	4817      	ldr	r0, [pc, #92]	; (8000674 <HAL_InitTick+0xd0>)
 8000616:	f001 f829 	bl	800166c <HAL_TIM_Base_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000624:	2b00      	cmp	r3, #0
 8000626:	d11b      	bne.n	8000660 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <HAL_InitTick+0xd0>)
 800062a:	f001 f881 	bl	8001730 <HAL_TIM_Base_Start_IT>
 800062e:	4603      	mov	r3, r0
 8000630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000638:	2b00      	cmp	r3, #0
 800063a:	d111      	bne.n	8000660 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800063c:	2019      	movs	r0, #25
 800063e:	f000 f987 	bl	8000950 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d808      	bhi.n	800065a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	2019      	movs	r0, #25
 800064e:	f000 f963 	bl	8000918 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <HAL_InitTick+0xd8>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	e002      	b.n	8000660 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000664:	4618      	mov	r0, r3
 8000666:	3730      	adds	r7, #48	; 0x30
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	431bde83 	.word	0x431bde83
 8000674:	20000088 	.word	0x20000088
 8000678:	40014400 	.word	0x40014400
 800067c:	20000004 	.word	0x20000004

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80006b2:	f001 f8ad 	bl	8001810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000088 	.word	0x20000088

080006c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SystemInit+0x20>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <SystemInit+0x20>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800071c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e8:	f7ff ffea 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	; (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000712:	f004 fbcd 	bl	8004eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000716:	f7ff fe11 	bl	800033c <main>

0800071a <LoopForever>:

LoopForever:
    b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800071c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000728:	08005068 	.word	0x08005068
  ldr r2, =_sbss
 800072c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000730:	20001bc0 	.word	0x20001bc0

08000734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_2_IRQHandler>

08000736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800073c:	2300      	movs	r3, #0
 800073e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f8de 	bl	8000902 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000746:	200f      	movs	r0, #15
 8000748:	f7ff ff2c 	bl	80005a4 <HAL_InitTick>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	e001      	b.n	800075c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000758:	f7ff fefc 	bl	8000554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800075c:	79fb      	ldrb	r3, [r7, #7]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008
 800078c:	200000d4 	.word	0x200000d4

08000790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200000d4 	.word	0x200000d4

080007a8 <__NVIC_SetPriorityGrouping>:
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <__NVIC_EnableIRQ+0x38>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff4c 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800092a:	f7ff ff61 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 800092e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	68b9      	ldr	r1, [r7, #8]
 8000934:	6978      	ldr	r0, [r7, #20]
 8000936:	f7ff ffb1 	bl	800089c <NVIC_EncodePriority>
 800093a:	4602      	mov	r2, r0
 800093c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff80 	bl	8000848 <__NVIC_SetPriority>
}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff54 	bl	800080c <__NVIC_EnableIRQ>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <HAL_PWREx_GetVoltageRange+0x18>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40007000 	.word	0x40007000

08000988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000996:	d130      	bne.n	80009fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009a4:	d038      	beq.n	8000a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009ae:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2232      	movs	r2, #50	; 0x32
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	0c9b      	lsrs	r3, r3, #18
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009cc:	e002      	b.n	80009d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009e0:	d102      	bne.n	80009e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f2      	bne.n	80009ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009f4:	d110      	bne.n	8000a18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80009f6:	2303      	movs	r3, #3
 80009f8:	e00f      	b.n	8000a1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a06:	d007      	beq.n	8000a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a10:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40007000 	.word	0x40007000
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	431bde83 	.word	0x431bde83

08000a34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e3ca      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a46:	4b97      	ldr	r3, [pc, #604]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f003 030c 	and.w	r3, r3, #12
 8000a4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a50:	4b94      	ldr	r3, [pc, #592]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 80e4 	beq.w	8000c30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d007      	beq.n	8000a7e <HAL_RCC_OscConfig+0x4a>
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	2b0c      	cmp	r3, #12
 8000a72:	f040 808b 	bne.w	8000b8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	f040 8087 	bne.w	8000b8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a7e:	4b89      	ldr	r3, [pc, #548]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d005      	beq.n	8000a96 <HAL_RCC_OscConfig+0x62>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e3a2      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6a1a      	ldr	r2, [r3, #32]
 8000a9a:	4b82      	ldr	r3, [pc, #520]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d004      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x7c>
 8000aa6:	4b7f      	ldr	r3, [pc, #508]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000aae:	e005      	b.n	8000abc <HAL_RCC_OscConfig+0x88>
 8000ab0:	4b7c      	ldr	r3, [pc, #496]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d223      	bcs.n	8000b08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fd71 	bl	80015ac <RCC_SetFlashLatencyFromMSIRange>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e383      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ad4:	4b73      	ldr	r3, [pc, #460]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a72      	ldr	r2, [pc, #456]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b70      	ldr	r3, [pc, #448]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	496d      	ldr	r1, [pc, #436]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000aee:	4313      	orrs	r3, r2
 8000af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000af2:	4b6c      	ldr	r3, [pc, #432]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	4968      	ldr	r1, [pc, #416]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b02:	4313      	orrs	r3, r2
 8000b04:	604b      	str	r3, [r1, #4]
 8000b06:	e025      	b.n	8000b54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b08:	4b66      	ldr	r3, [pc, #408]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a65      	ldr	r2, [pc, #404]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b63      	ldr	r3, [pc, #396]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4960      	ldr	r1, [pc, #384]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b22:	4313      	orrs	r3, r2
 8000b24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	495b      	ldr	r1, [pc, #364]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b36:	4313      	orrs	r3, r2
 8000b38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fd31 	bl	80015ac <RCC_SetFlashLatencyFromMSIRange>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e343      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b54:	f000 fc4a 	bl	80013ec <HAL_RCC_GetSysClockFreq>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	091b      	lsrs	r3, r3, #4
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	4950      	ldr	r1, [pc, #320]	; (8000ca8 <HAL_RCC_OscConfig+0x274>)
 8000b66:	5ccb      	ldrb	r3, [r1, r3]
 8000b68:	f003 031f 	and.w	r3, r3, #31
 8000b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b70:	4a4e      	ldr	r2, [pc, #312]	; (8000cac <HAL_RCC_OscConfig+0x278>)
 8000b72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000b74:	4b4e      	ldr	r3, [pc, #312]	; (8000cb0 <HAL_RCC_OscConfig+0x27c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fd13 	bl	80005a4 <HAL_InitTick>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d052      	beq.n	8000c2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	e327      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d032      	beq.n	8000bfa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000b94:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a42      	ldr	r2, [pc, #264]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ba0:	f7ff fdf6 	bl	8000790 <HAL_GetTick>
 8000ba4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ba6:	e008      	b.n	8000bba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ba8:	f7ff fdf2 	bl	8000790 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d901      	bls.n	8000bba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e310      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bba:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0f0      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bc6:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a36      	ldr	r2, [pc, #216]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a1b      	ldr	r3, [r3, #32]
 8000bde:	4931      	ldr	r1, [pc, #196]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000be0:	4313      	orrs	r3, r2
 8000be2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	492c      	ldr	r1, [pc, #176]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
 8000bf8:	e01a      	b.n	8000c30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000c00:	f023 0301 	bic.w	r3, r3, #1
 8000c04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c06:	f7ff fdc3 	bl	8000790 <HAL_GetTick>
 8000c0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c0c:	e008      	b.n	8000c20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c0e:	f7ff fdbf 	bl	8000790 <HAL_GetTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d901      	bls.n	8000c20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e2dd      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1f0      	bne.n	8000c0e <HAL_RCC_OscConfig+0x1da>
 8000c2c:	e000      	b.n	8000c30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d074      	beq.n	8000d26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d005      	beq.n	8000c4e <HAL_RCC_OscConfig+0x21a>
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	2b0c      	cmp	r3, #12
 8000c46:	d10e      	bne.n	8000c66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d10b      	bne.n	8000c66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d064      	beq.n	8000d24 <HAL_RCC_OscConfig+0x2f0>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d160      	bne.n	8000d24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e2ba      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c6e:	d106      	bne.n	8000c7e <HAL_RCC_OscConfig+0x24a>
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	e026      	b.n	8000ccc <HAL_RCC_OscConfig+0x298>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c86:	d115      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x280>
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a02      	ldr	r2, [pc, #8]	; (8000ca4 <HAL_RCC_OscConfig+0x270>)
 8000c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e014      	b.n	8000ccc <HAL_RCC_OscConfig+0x298>
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	08005018 	.word	0x08005018
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000004 	.word	0x20000004
 8000cb4:	4ba0      	ldr	r3, [pc, #640]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a9f      	ldr	r2, [pc, #636]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	4b9d      	ldr	r3, [pc, #628]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a9c      	ldr	r2, [pc, #624]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d013      	beq.n	8000cfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd4:	f7ff fd5c 	bl	8000790 <HAL_GetTick>
 8000cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cda:	e008      	b.n	8000cee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cdc:	f7ff fd58 	bl	8000790 <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b64      	cmp	r3, #100	; 0x64
 8000ce8:	d901      	bls.n	8000cee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e276      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cee:	4b92      	ldr	r3, [pc, #584]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f0      	beq.n	8000cdc <HAL_RCC_OscConfig+0x2a8>
 8000cfa:	e014      	b.n	8000d26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfc:	f7ff fd48 	bl	8000790 <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d02:	e008      	b.n	8000d16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d04:	f7ff fd44 	bl	8000790 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b64      	cmp	r3, #100	; 0x64
 8000d10:	d901      	bls.n	8000d16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e262      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d16:	4b88      	ldr	r3, [pc, #544]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f0      	bne.n	8000d04 <HAL_RCC_OscConfig+0x2d0>
 8000d22:	e000      	b.n	8000d26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d060      	beq.n	8000df4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d005      	beq.n	8000d44 <HAL_RCC_OscConfig+0x310>
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2b0c      	cmp	r3, #12
 8000d3c:	d119      	bne.n	8000d72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d116      	bne.n	8000d72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d44:	4b7c      	ldr	r3, [pc, #496]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <HAL_RCC_OscConfig+0x328>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e23f      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5c:	4b76      	ldr	r3, [pc, #472]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	061b      	lsls	r3, r3, #24
 8000d6a:	4973      	ldr	r1, [pc, #460]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d70:	e040      	b.n	8000df4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d023      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a6e      	ldr	r2, [pc, #440]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d86:	f7ff fd03 	bl	8000790 <HAL_GetTick>
 8000d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d8c:	e008      	b.n	8000da0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d8e:	f7ff fcff 	bl	8000790 <HAL_GetTick>
 8000d92:	4602      	mov	r2, r0
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e21d      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000da0:	4b65      	ldr	r3, [pc, #404]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f0      	beq.n	8000d8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dac:	4b62      	ldr	r3, [pc, #392]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	061b      	lsls	r3, r3, #24
 8000dba:	495f      	ldr	r1, [pc, #380]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
 8000dc0:	e018      	b.n	8000df4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a5c      	ldr	r2, [pc, #368]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dce:	f7ff fcdf 	bl	8000790 <HAL_GetTick>
 8000dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000dd4:	e008      	b.n	8000de8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd6:	f7ff fcdb 	bl	8000790 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e1f9      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000de8:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1f0      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d03c      	beq.n	8000e7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d01c      	beq.n	8000e42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e08:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e0e:	4a4a      	ldr	r2, [pc, #296]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e18:	f7ff fcba 	bl	8000790 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff fcb6 	bl	8000790 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e1d4      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e32:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0ef      	beq.n	8000e20 <HAL_RCC_OscConfig+0x3ec>
 8000e40:	e01b      	b.n	8000e7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e42:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e48:	4a3b      	ldr	r2, [pc, #236]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000e4a:	f023 0301 	bic.w	r3, r3, #1
 8000e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e52:	f7ff fc9d 	bl	8000790 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fc99 	bl	8000790 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e1b7      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e6c:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1ef      	bne.n	8000e5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80a6 	beq.w	8000fd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10d      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9c:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <HAL_RCC_OscConfig+0x508>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d118      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_RCC_OscConfig+0x508>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_RCC_OscConfig+0x508>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fc60 	bl	8000790 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed4:	f7ff fc5c 	bl	8000790 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e17a      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_RCC_OscConfig+0x508>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f0      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d108      	bne.n	8000f0c <HAL_RCC_OscConfig+0x4d8>
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f0a:	e029      	b.n	8000f60 <HAL_RCC_OscConfig+0x52c>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d115      	bne.n	8000f40 <HAL_RCC_OscConfig+0x50c>
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f2a:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <HAL_RCC_OscConfig+0x504>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f34:	e014      	b.n	8000f60 <HAL_RCC_OscConfig+0x52c>
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40007000 	.word	0x40007000
 8000f40:	4b9c      	ldr	r3, [pc, #624]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8000f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f46:	4a9b      	ldr	r2, [pc, #620]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8000f48:	f023 0301 	bic.w	r3, r3, #1
 8000f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f50:	4b98      	ldr	r3, [pc, #608]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8000f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f56:	4a97      	ldr	r2, [pc, #604]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8000f58:	f023 0304 	bic.w	r3, r3, #4
 8000f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d016      	beq.n	8000f96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f68:	f7ff fc12 	bl	8000790 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f6e:	e00a      	b.n	8000f86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f70:	f7ff fc0e 	bl	8000790 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e12a      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f86:	4b8b      	ldr	r3, [pc, #556]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8000f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0ed      	beq.n	8000f70 <HAL_RCC_OscConfig+0x53c>
 8000f94:	e015      	b.n	8000fc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f96:	f7ff fbfb 	bl	8000790 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f9c:	e00a      	b.n	8000fb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f9e:	f7ff fbf7 	bl	8000790 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e113      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fb4:	4b7f      	ldr	r3, [pc, #508]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8000fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1ed      	bne.n	8000f9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d105      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fc8:	4b7a      	ldr	r3, [pc, #488]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8000fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fcc:	4a79      	ldr	r2, [pc, #484]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8000fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80fe 	beq.w	80011da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	f040 80d0 	bne.w	8001188 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000fe8:	4b72      	ldr	r3, [pc, #456]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0203 	and.w	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d130      	bne.n	800105e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	3b01      	subs	r3, #1
 8001008:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800100a:	429a      	cmp	r2, r3
 800100c:	d127      	bne.n	800105e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800101a:	429a      	cmp	r2, r3
 800101c:	d11f      	bne.n	800105e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001028:	2a07      	cmp	r2, #7
 800102a:	bf14      	ite	ne
 800102c:	2201      	movne	r2, #1
 800102e:	2200      	moveq	r2, #0
 8001030:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001032:	4293      	cmp	r3, r2
 8001034:	d113      	bne.n	800105e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	3b01      	subs	r3, #1
 8001044:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001046:	429a      	cmp	r2, r3
 8001048:	d109      	bne.n	800105e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	3b01      	subs	r3, #1
 8001058:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800105a:	429a      	cmp	r2, r3
 800105c:	d06e      	beq.n	800113c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d069      	beq.n	8001138 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001064:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d105      	bne.n	800107c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001070:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0ad      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8001086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800108a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800108c:	f7ff fb80 	bl	8000790 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001094:	f7ff fb7c 	bl	8000790 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e09a      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010a6:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b2:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_RCC_OscConfig+0x784>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010c2:	3a01      	subs	r2, #1
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	4311      	orrs	r1, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010cc:	0212      	lsls	r2, r2, #8
 80010ce:	4311      	orrs	r1, r2
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80010d4:	0852      	lsrs	r2, r2, #1
 80010d6:	3a01      	subs	r2, #1
 80010d8:	0552      	lsls	r2, r2, #21
 80010da:	4311      	orrs	r1, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010e0:	0852      	lsrs	r2, r2, #1
 80010e2:	3a01      	subs	r2, #1
 80010e4:	0652      	lsls	r2, r2, #25
 80010e6:	4311      	orrs	r1, r2
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80010ec:	0912      	lsrs	r2, r2, #4
 80010ee:	0452      	lsls	r2, r2, #17
 80010f0:	430a      	orrs	r2, r1
 80010f2:	4930      	ldr	r1, [pc, #192]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80010f8:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 80010fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001102:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 800110a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800110e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001110:	f7ff fb3e 	bl	8000790 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fb3a 	bl	8000790 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e058      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001136:	e050      	b.n	80011da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e04f      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d148      	bne.n	80011da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 800114e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001152:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 800115a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800115e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001160:	f7ff fb16 	bl	8000790 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001168:	f7ff fb12 	bl	8000790 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e030      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x734>
 8001186:	e028      	b.n	80011da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b0c      	cmp	r3, #12
 800118c:	d023      	beq.n	80011d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_RCC_OscConfig+0x780>)
 8001194:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119a:	f7ff faf9 	bl	8000790 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011a0:	e00c      	b.n	80011bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a2:	f7ff faf5 	bl	8000790 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d905      	bls.n	80011bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e013      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
 80011b4:	40021000 	.word	0x40021000
 80011b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_RCC_OscConfig+0x7b0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1ec      	bne.n	80011a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_RCC_OscConfig+0x7b0>)
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	4905      	ldr	r1, [pc, #20]	; (80011e4 <HAL_RCC_OscConfig+0x7b0>)
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_RCC_OscConfig+0x7b4>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	60cb      	str	r3, [r1, #12]
 80011d4:	e001      	b.n	80011da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	feeefffc 	.word	0xfeeefffc

080011ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0e7      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001200:	4b75      	ldr	r3, [pc, #468]	; (80013d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d910      	bls.n	8001230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b72      	ldr	r3, [pc, #456]	; (80013d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0207 	bic.w	r2, r3, #7
 8001216:	4970      	ldr	r1, [pc, #448]	; (80013d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b6e      	ldr	r3, [pc, #440]	; (80013d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0cf      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d010      	beq.n	800125e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	4b66      	ldr	r3, [pc, #408]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001248:	429a      	cmp	r2, r3
 800124a:	d908      	bls.n	800125e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b63      	ldr	r3, [pc, #396]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4960      	ldr	r1, [pc, #384]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d04c      	beq.n	8001304 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001272:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d121      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0a6      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	4b54      	ldr	r3, [pc, #336]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d115      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e09a      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a2:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e08e      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e086      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f023 0203 	bic.w	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4943      	ldr	r1, [pc, #268]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012d4:	f7ff fa5c 	bl	8000790 <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012dc:	f7ff fa58 	bl	8000790 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e06e      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 020c 	and.w	r2, r3, #12
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	429a      	cmp	r2, r3
 8001302:	d1eb      	bne.n	80012dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d010      	beq.n	8001332 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	4b31      	ldr	r3, [pc, #196]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800131c:	429a      	cmp	r2, r3
 800131e:	d208      	bcs.n	8001332 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	492b      	ldr	r1, [pc, #172]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 800132e:	4313      	orrs	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d210      	bcs.n	8001362 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 0207 	bic.w	r2, r3, #7
 8001348:	4923      	ldr	r1, [pc, #140]	; (80013d8 <HAL_RCC_ClockConfig+0x1ec>)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d001      	beq.n	8001362 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e036      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	4918      	ldr	r1, [pc, #96]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 800137c:	4313      	orrs	r3, r2
 800137e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d009      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4910      	ldr	r1, [pc, #64]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 800139c:	4313      	orrs	r3, r2
 800139e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013a0:	f000 f824 	bl	80013ec <HAL_RCC_GetSysClockFreq>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_RCC_ClockConfig+0x1f0>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	490b      	ldr	r1, [pc, #44]	; (80013e0 <HAL_RCC_ClockConfig+0x1f4>)
 80013b2:	5ccb      	ldrb	r3, [r1, r3]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_RCC_ClockConfig+0x1f8>)
 80013be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_ClockConfig+0x1fc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8ed 	bl	80005a4 <HAL_InitTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80013ce:	7afb      	ldrb	r3, [r7, #11]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40022000 	.word	0x40022000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	08005018 	.word	0x08005018
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fa:	4b3e      	ldr	r3, [pc, #248]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001404:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x34>
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b0c      	cmp	r3, #12
 8001418:	d121      	bne.n	800145e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d11e      	bne.n	800145e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800142c:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800142e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e005      	b.n	8001448 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001448:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10d      	bne.n	8001474 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b04      	cmp	r3, #4
 8001462:	d102      	bne.n	800146a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_RCC_GetSysClockFreq+0x110>)
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	e004      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2b08      	cmp	r3, #8
 800146e:	d101      	bne.n	8001474 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_RCC_GetSysClockFreq+0x114>)
 8001472:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d134      	bne.n	80014e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_GetSysClockFreq+0xa6>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d003      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0xac>
 8001490:	e005      	b.n	800149e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_RCC_GetSysClockFreq+0x110>)
 8001494:	617b      	str	r3, [r7, #20]
      break;
 8001496:	e005      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_RCC_GetSysClockFreq+0x114>)
 800149a:	617b      	str	r3, [r7, #20]
      break;
 800149c:	e002      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	617b      	str	r3, [r7, #20]
      break;
 80014a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	3301      	adds	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	fb03 f202 	mul.w	r2, r3, r2
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	0e5b      	lsrs	r3, r3, #25
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	3301      	adds	r3, #1
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80014e4:	69bb      	ldr	r3, [r7, #24]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	08005030 	.word	0x08005030
 80014fc:	00f42400 	.word	0x00f42400
 8001500:	007a1200 	.word	0x007a1200

08001504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_RCC_GetHCLKFreq+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000000 	.word	0x20000000

0800151c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001520:	f7ff fff0 	bl	8001504 <HAL_RCC_GetHCLKFreq>
 8001524:	4602      	mov	r2, r0
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	0adb      	lsrs	r3, r3, #11
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	4904      	ldr	r1, [pc, #16]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001532:	5ccb      	ldrb	r3, [r1, r3]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	08005028 	.word	0x08005028

08001548 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	220f      	movs	r2, #15
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_RCC_GetClockConfig+0x60>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40022000 	.word	0x40022000

080015ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80015c4:	f7ff f9d2 	bl	800096c <HAL_PWREx_GetVoltageRange>
 80015c8:	6178      	str	r0, [r7, #20]
 80015ca:	e014      	b.n	80015f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	4a24      	ldr	r2, [pc, #144]	; (8001664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6593      	str	r3, [r2, #88]	; 0x58
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80015e4:	f7ff f9c2 	bl	800096c <HAL_PWREx_GetVoltageRange>
 80015e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015fc:	d10b      	bne.n	8001616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b80      	cmp	r3, #128	; 0x80
 8001602:	d919      	bls.n	8001638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2ba0      	cmp	r3, #160	; 0xa0
 8001608:	d902      	bls.n	8001610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800160a:	2302      	movs	r3, #2
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	e013      	b.n	8001638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001610:	2301      	movs	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	e010      	b.n	8001638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b80      	cmp	r3, #128	; 0x80
 800161a:	d902      	bls.n	8001622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800161c:	2303      	movs	r3, #3
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	e00a      	b.n	8001638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b80      	cmp	r3, #128	; 0x80
 8001626:	d102      	bne.n	800162e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001628:	2302      	movs	r3, #2
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	e004      	b.n	8001638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b70      	cmp	r3, #112	; 0x70
 8001632:	d101      	bne.n	8001638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001634:	2301      	movs	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 0207 	bic.w	r2, r3, #7
 8001640:	4909      	ldr	r1, [pc, #36]	; (8001668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e049      	b.n	8001712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f841 	bl	800171a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3304      	adds	r3, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f000 f9da 	bl	8001a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d001      	beq.n	8001748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e04f      	b.n	80017e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01d      	beq.n	80017a6 <HAL_TIM_Base_Start_IT+0x76>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001772:	d018      	beq.n	80017a6 <HAL_TIM_Base_Start_IT+0x76>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_TIM_Base_Start_IT+0x76>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <HAL_TIM_Base_Start_IT+0xcc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00e      	beq.n	80017a6 <HAL_TIM_Base_Start_IT+0x76>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <HAL_TIM_Base_Start_IT+0xd0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d009      	beq.n	80017a6 <HAL_TIM_Base_Start_IT+0x76>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <HAL_TIM_Base_Start_IT+0xd4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d004      	beq.n	80017a6 <HAL_TIM_Base_Start_IT+0x76>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <HAL_TIM_Base_Start_IT+0xd8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d115      	bne.n	80017d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_TIM_Base_Start_IT+0xdc>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b06      	cmp	r3, #6
 80017b6:	d015      	beq.n	80017e4 <HAL_TIM_Base_Start_IT+0xb4>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017be:	d011      	beq.n	80017e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017d0:	e008      	b.n	80017e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e000      	b.n	80017e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40012c00 	.word	0x40012c00
 80017f8:	40000400 	.word	0x40000400
 80017fc:	40000800 	.word	0x40000800
 8001800:	40000c00 	.word	0x40000c00
 8001804:	40013400 	.word	0x40013400
 8001808:	40014000 	.word	0x40014000
 800180c:	00010007 	.word	0x00010007

08001810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d020      	beq.n	8001874 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01b      	beq.n	8001874 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 0202 	mvn.w	r2, #2
 8001844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8e4 	bl	8001a28 <HAL_TIM_IC_CaptureCallback>
 8001860:	e005      	b.n	800186e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f8d6 	bl	8001a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f8e7 	bl	8001a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d020      	beq.n	80018c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01b      	beq.n	80018c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f06f 0204 	mvn.w	r2, #4
 8001890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2202      	movs	r2, #2
 8001896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f8be 	bl	8001a28 <HAL_TIM_IC_CaptureCallback>
 80018ac:	e005      	b.n	80018ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f8b0 	bl	8001a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f8c1 	bl	8001a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d020      	beq.n	800190c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01b      	beq.n	800190c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0208 	mvn.w	r2, #8
 80018dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2204      	movs	r2, #4
 80018e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f898 	bl	8001a28 <HAL_TIM_IC_CaptureCallback>
 80018f8:	e005      	b.n	8001906 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f88a 	bl	8001a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f89b 	bl	8001a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b00      	cmp	r3, #0
 8001914:	d020      	beq.n	8001958 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01b      	beq.n	8001958 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0210 	mvn.w	r2, #16
 8001928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2208      	movs	r2, #8
 800192e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f872 	bl	8001a28 <HAL_TIM_IC_CaptureCallback>
 8001944:	e005      	b.n	8001952 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f864 	bl	8001a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f875 	bl	8001a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00c      	beq.n	800197c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0201 	mvn.w	r2, #1
 8001974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7fe fdd4 	bl	8000524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00c      	beq.n	80019a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f906 	bl	8001bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00c      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d007      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80019bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f8fe 	bl	8001bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00c      	beq.n	80019e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d007      	beq.n	80019e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f834 	bl	8001a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00c      	beq.n	8001a0c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 0220 	mvn.w	r2, #32
 8001a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8c6 	bl	8001b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a40      	ldr	r2, [pc, #256]	; (8001b78 <TIM_Base_SetConfig+0x114>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a82:	d00f      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3d      	ldr	r2, [pc, #244]	; (8001b7c <TIM_Base_SetConfig+0x118>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00b      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3c      	ldr	r2, [pc, #240]	; (8001b80 <TIM_Base_SetConfig+0x11c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <TIM_Base_SetConfig+0x120>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d003      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a3a      	ldr	r2, [pc, #232]	; (8001b88 <TIM_Base_SetConfig+0x124>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d108      	bne.n	8001ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <TIM_Base_SetConfig+0x114>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d01f      	beq.n	8001afe <TIM_Base_SetConfig+0x9a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac4:	d01b      	beq.n	8001afe <TIM_Base_SetConfig+0x9a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <TIM_Base_SetConfig+0x118>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d017      	beq.n	8001afe <TIM_Base_SetConfig+0x9a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <TIM_Base_SetConfig+0x11c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <TIM_Base_SetConfig+0x9a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	; (8001b84 <TIM_Base_SetConfig+0x120>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00f      	beq.n	8001afe <TIM_Base_SetConfig+0x9a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <TIM_Base_SetConfig+0x124>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00b      	beq.n	8001afe <TIM_Base_SetConfig+0x9a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <TIM_Base_SetConfig+0x128>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <TIM_Base_SetConfig+0x9a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <TIM_Base_SetConfig+0x12c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d003      	beq.n	8001afe <TIM_Base_SetConfig+0x9a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <TIM_Base_SetConfig+0x130>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d108      	bne.n	8001b10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <TIM_Base_SetConfig+0x114>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00f      	beq.n	8001b5c <TIM_Base_SetConfig+0xf8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <TIM_Base_SetConfig+0x124>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00b      	beq.n	8001b5c <TIM_Base_SetConfig+0xf8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <TIM_Base_SetConfig+0x128>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <TIM_Base_SetConfig+0xf8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <TIM_Base_SetConfig+0x12c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d003      	beq.n	8001b5c <TIM_Base_SetConfig+0xf8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <TIM_Base_SetConfig+0x130>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d103      	bne.n	8001b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	615a      	str	r2, [r3, #20]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40012c00 	.word	0x40012c00
 8001b7c:	40000400 	.word	0x40000400
 8001b80:	40000800 	.word	0x40000800
 8001b84:	40000c00 	.word	0x40000c00
 8001b88:	40013400 	.word	0x40013400
 8001b8c:	40014000 	.word	0x40014000
 8001b90:	40014400 	.word	0x40014400
 8001b94:	40014800 	.word	0x40014800

08001b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SysTick_Handler+0x1c>)
 8001bda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001bdc:	f001 fec8 	bl	8003970 <xTaskGetSchedulerState>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d001      	beq.n	8001bea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001be6:	f002 fdaf 	bl	8004748 <xPortSysTickHandler>
  }
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <vApplicationGetIdleTaskMemory+0x30>)
 8001c0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200000d8 	.word	0x200000d8
 8001c24:	20000180 	.word	0x20000180

08001c28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <vApplicationGetTimerTaskMemory+0x2c>)
 8001c38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <vApplicationGetTimerTaskMemory+0x30>)
 8001c3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c46:	601a      	str	r2, [r3, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	20000380 	.word	0x20000380
 8001c58:	20000428 	.word	0x20000428

08001c5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f103 0208 	add.w	r2, r3, #8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f103 0208 	add.w	r2, r3, #8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f103 0208 	add.w	r2, r3, #8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	601a      	str	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b085      	sub	sp, #20
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d103      	bne.n	8001d1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e00c      	b.n	8001d38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3308      	adds	r3, #8
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e002      	b.n	8001d2c <vListInsert+0x2e>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d2f6      	bcs.n	8001d26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6892      	ldr	r2, [r2, #8]
 8001d86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6852      	ldr	r2, [r2, #4]
 8001d90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d103      	bne.n	8001da4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	1e5a      	subs	r2, r3, #1
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001dea:	bf00      	nop
 8001dec:	e7fe      	b.n	8001dec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001dee:	f002 fc19 	bl	8004624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	441a      	add	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	68f9      	ldr	r1, [r7, #12]
 8001e22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	441a      	add	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	22ff      	movs	r2, #255	; 0xff
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	22ff      	movs	r2, #255	; 0xff
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d114      	bne.n	8001e6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01a      	beq.n	8001e82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3310      	adds	r3, #16
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 fb73 	bl	800353c <xTaskRemoveFromEventList>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d012      	beq.n	8001e82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <xQueueGenericReset+0xcc>)
 8001e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	e009      	b.n	8001e82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3310      	adds	r3, #16
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fef2 	bl	8001c5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3324      	adds	r3, #36	; 0x24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff feed 	bl	8001c5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e82:	f002 fbff 	bl	8004684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	e000ed04 	.word	0xe000ed04

08001e94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08e      	sub	sp, #56	; 0x38
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eac:	f383 8811 	msr	BASEPRI, r3
 8001eb0:	f3bf 8f6f 	isb	sy
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001eba:	bf00      	nop
 8001ebc:	e7fe      	b.n	8001ebc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10a      	bne.n	8001eda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ed6:	bf00      	nop
 8001ed8:	e7fe      	b.n	8001ed8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <xQueueGenericCreateStatic+0x52>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <xQueueGenericCreateStatic+0x56>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <xQueueGenericCreateStatic+0x58>
 8001eea:	2300      	movs	r3, #0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	623b      	str	r3, [r7, #32]
}
 8001f02:	bf00      	nop
 8001f04:	e7fe      	b.n	8001f04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <xQueueGenericCreateStatic+0x7e>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <xQueueGenericCreateStatic+0x82>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <xQueueGenericCreateStatic+0x84>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	61fb      	str	r3, [r7, #28]
}
 8001f2e:	bf00      	nop
 8001f30:	e7fe      	b.n	8001f30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f32:	2350      	movs	r3, #80	; 0x50
 8001f34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b50      	cmp	r3, #80	; 0x50
 8001f3a:	d00a      	beq.n	8001f52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f40:	f383 8811 	msr	BASEPRI, r3
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	61bb      	str	r3, [r7, #24]
}
 8001f4e:	bf00      	nop
 8001f50:	e7fe      	b.n	8001f50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001f52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00d      	beq.n	8001f7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f83f 	bl	8001ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3730      	adds	r7, #48	; 0x30
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <xQueueGenericCreate+0x2a>
	__asm volatile
 8001f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9c:	f383 8811 	msr	BASEPRI, r3
 8001fa0:	f3bf 8f6f 	isb	sy
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	613b      	str	r3, [r7, #16]
}
 8001faa:	bf00      	nop
 8001fac:	e7fe      	b.n	8001fac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	3350      	adds	r3, #80	; 0x50
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f002 fd2f 	bl	8004a20 <pvPortMalloc>
 8001fc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d011      	beq.n	8001fee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3350      	adds	r3, #80	; 0x50
 8001fd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fdc:	79fa      	ldrb	r2, [r7, #7]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f805 	bl	8001ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001fee:	69bb      	ldr	r3, [r7, #24]
	}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d103      	bne.n	8002014 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e002      	b.n	800201a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002026:	2101      	movs	r1, #1
 8002028:	69b8      	ldr	r0, [r7, #24]
 800202a:	f7ff fecb 	bl	8001dc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08e      	sub	sp, #56	; 0x38
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800204e:	2300      	movs	r3, #0
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10a      	bne.n	8002072 <xQueueGenericSend+0x32>
	__asm volatile
 800205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002060:	f383 8811 	msr	BASEPRI, r3
 8002064:	f3bf 8f6f 	isb	sy
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800206e:	bf00      	nop
 8002070:	e7fe      	b.n	8002070 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <xQueueGenericSend+0x40>
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <xQueueGenericSend+0x44>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <xQueueGenericSend+0x46>
 8002084:	2300      	movs	r3, #0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10a      	bne.n	80020a0 <xQueueGenericSend+0x60>
	__asm volatile
 800208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	f3bf 8f6f 	isb	sy
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800209c:	bf00      	nop
 800209e:	e7fe      	b.n	800209e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d103      	bne.n	80020ae <xQueueGenericSend+0x6e>
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <xQueueGenericSend+0x72>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <xQueueGenericSend+0x74>
 80020b2:	2300      	movs	r3, #0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <xQueueGenericSend+0x8e>
	__asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	623b      	str	r3, [r7, #32]
}
 80020ca:	bf00      	nop
 80020cc:	e7fe      	b.n	80020cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020ce:	f001 fc4f 	bl	8003970 <xTaskGetSchedulerState>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <xQueueGenericSend+0x9e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <xQueueGenericSend+0xa2>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <xQueueGenericSend+0xa4>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <xQueueGenericSend+0xbe>
	__asm volatile
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	61fb      	str	r3, [r7, #28]
}
 80020fa:	bf00      	nop
 80020fc:	e7fe      	b.n	80020fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020fe:	f002 fa91 	bl	8004624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <xQueueGenericSend+0xd4>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d129      	bne.n	8002168 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800211a:	f000 fbbb 	bl	8002894 <prvCopyDataToQueue>
 800211e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d010      	beq.n	800214a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	3324      	adds	r3, #36	; 0x24
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fa05 	bl	800353c <xTaskRemoveFromEventList>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <xQueueGenericSend+0x1f8>)
 800213a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	e00a      	b.n	8002160 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002150:	4b39      	ldr	r3, [pc, #228]	; (8002238 <xQueueGenericSend+0x1f8>)
 8002152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002160:	f002 fa90 	bl	8004684 <vPortExitCritical>
				return pdPASS;
 8002164:	2301      	movs	r3, #1
 8002166:	e063      	b.n	8002230 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800216e:	f002 fa89 	bl	8004684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002172:	2300      	movs	r3, #0
 8002174:	e05c      	b.n	8002230 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4618      	mov	r0, r3
 8002182:	f001 fa41 	bl	8003608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002186:	2301      	movs	r3, #1
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800218a:	f002 fa7b 	bl	8004684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800218e:	f000 ff4b 	bl	8003028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002192:	f002 fa47 	bl	8004624 <vPortEnterCritical>
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800219c:	b25b      	sxtb	r3, r3
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d103      	bne.n	80021ac <xQueueGenericSend+0x16c>
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d103      	bne.n	80021c2 <xQueueGenericSend+0x182>
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021c2:	f002 fa5f 	bl	8004684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021c6:	1d3a      	adds	r2, r7, #4
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 fa30 	bl	8003634 <xTaskCheckForTimeOut>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d124      	bne.n	8002224 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021dc:	f000 fc52 	bl	8002a84 <prvIsQueueFull>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d018      	beq.n	8002218 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	3310      	adds	r3, #16
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 f954 	bl	800349c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f6:	f000 fbdd 	bl	80029b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021fa:	f000 ff5b 	bl	80030b4 <xTaskResumeAll>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f af7c 	bne.w	80020fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <xQueueGenericSend+0x1f8>)
 8002208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	e772      	b.n	80020fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800221a:	f000 fbcb 	bl	80029b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800221e:	f000 ff49 	bl	80030b4 <xTaskResumeAll>
 8002222:	e76c      	b.n	80020fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002226:	f000 fbc5 	bl	80029b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800222a:	f000 ff43 	bl	80030b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800222e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002230:	4618      	mov	r0, r3
 8002232:	3738      	adds	r7, #56	; 0x38
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	e000ed04 	.word	0xe000ed04

0800223c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b090      	sub	sp, #64	; 0x40
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002266:	bf00      	nop
 8002268:	e7fe      	b.n	8002268 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d103      	bne.n	8002278 <xQueueGenericSendFromISR+0x3c>
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <xQueueGenericSendFromISR+0x40>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <xQueueGenericSendFromISR+0x42>
 800227c:	2300      	movs	r3, #0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002294:	bf00      	nop
 8002296:	e7fe      	b.n	8002296 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d103      	bne.n	80022a6 <xQueueGenericSendFromISR+0x6a>
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <xQueueGenericSendFromISR+0x6e>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <xQueueGenericSendFromISR+0x70>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80022b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	623b      	str	r3, [r7, #32]
}
 80022c2:	bf00      	nop
 80022c4:	e7fe      	b.n	80022c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022c6:	f002 fb6b 	bl	80049a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80022ca:	f3ef 8211 	mrs	r2, BASEPRI
 80022ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	61fa      	str	r2, [r7, #28]
 80022e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80022e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <xQueueGenericSendFromISR+0xbc>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d12f      	bne.n	8002358 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800230e:	f000 fac1 	bl	8002894 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002312:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d112      	bne.n	8002342 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2b00      	cmp	r3, #0
 8002322:	d016      	beq.n	8002352 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	3324      	adds	r3, #36	; 0x24
 8002328:	4618      	mov	r0, r3
 800232a:	f001 f907 	bl	800353c <xTaskRemoveFromEventList>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00e      	beq.n	8002352 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e007      	b.n	8002352 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002342:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002346:	3301      	adds	r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	b25a      	sxtb	r2, r3
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002352:	2301      	movs	r3, #1
 8002354:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002356:	e001      	b.n	800235c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002358:	2300      	movs	r3, #0
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002366:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800236a:	4618      	mov	r0, r3
 800236c:	3740      	adds	r7, #64	; 0x40
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b08e      	sub	sp, #56	; 0x38
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10a      	bne.n	800239c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	623b      	str	r3, [r7, #32]
}
 8002398:	bf00      	nop
 800239a:	e7fe      	b.n	800239a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <xQueueGiveFromISR+0x48>
	__asm volatile
 80023a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a8:	f383 8811 	msr	BASEPRI, r3
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	61fb      	str	r3, [r7, #28]
}
 80023b6:	bf00      	nop
 80023b8:	e7fe      	b.n	80023b8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d103      	bne.n	80023ca <xQueueGiveFromISR+0x58>
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <xQueueGiveFromISR+0x5c>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <xQueueGiveFromISR+0x5e>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <xQueueGiveFromISR+0x78>
	__asm volatile
 80023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	61bb      	str	r3, [r7, #24]
}
 80023e6:	bf00      	nop
 80023e8:	e7fe      	b.n	80023e8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80023ea:	f002 fad9 	bl	80049a0 <vPortValidateInterruptPriority>
	__asm volatile
 80023ee:	f3ef 8211 	mrs	r2, BASEPRI
 80023f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	617a      	str	r2, [r7, #20]
 8002404:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002406:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002416:	429a      	cmp	r2, r3
 8002418:	d22b      	bcs.n	8002472 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800242c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d112      	bne.n	800245c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b00      	cmp	r3, #0
 800243c:	d016      	beq.n	800246c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	3324      	adds	r3, #36	; 0x24
 8002442:	4618      	mov	r0, r3
 8002444:	f001 f87a 	bl	800353c <xTaskRemoveFromEventList>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00e      	beq.n	800246c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e007      	b.n	800246c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800245c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002460:	3301      	adds	r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	b25a      	sxtb	r2, r3
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800246c:	2301      	movs	r3, #1
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
 8002470:	e001      	b.n	8002476 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002472:	2300      	movs	r3, #0
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f383 8811 	msr	BASEPRI, r3
}
 8002480:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002484:	4618      	mov	r0, r3
 8002486:	3738      	adds	r7, #56	; 0x38
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	; 0x30
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002498:	2300      	movs	r3, #0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <xQueueReceive+0x30>
	__asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	623b      	str	r3, [r7, #32]
}
 80024b8:	bf00      	nop
 80024ba:	e7fe      	b.n	80024ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <xQueueReceive+0x3e>
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <xQueueReceive+0x42>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <xQueueReceive+0x44>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <xQueueReceive+0x5e>
	__asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	61fb      	str	r3, [r7, #28]
}
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ea:	f001 fa41 	bl	8003970 <xTaskGetSchedulerState>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <xQueueReceive+0x6e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <xQueueReceive+0x72>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <xQueueReceive+0x74>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueReceive+0x8e>
	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	61bb      	str	r3, [r7, #24]
}
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800251a:	f002 f883 	bl	8004624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01f      	beq.n	800256a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800252e:	f000 fa1b 	bl	8002968 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	1e5a      	subs	r2, r3, #1
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00f      	beq.n	8002562 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	3310      	adds	r3, #16
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fff8 	bl	800353c <xTaskRemoveFromEventList>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <xQueueReceive+0x1bc>)
 8002554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002562:	f002 f88f 	bl	8004684 <vPortExitCritical>
				return pdPASS;
 8002566:	2301      	movs	r3, #1
 8002568:	e069      	b.n	800263e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002570:	f002 f888 	bl	8004684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002574:	2300      	movs	r3, #0
 8002576:	e062      	b.n	800263e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800257e:	f107 0310 	add.w	r3, r7, #16
 8002582:	4618      	mov	r0, r3
 8002584:	f001 f840 	bl	8003608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002588:	2301      	movs	r3, #1
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800258c:	f002 f87a 	bl	8004684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002590:	f000 fd4a 	bl	8003028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002594:	f002 f846 	bl	8004624 <vPortEnterCritical>
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d103      	bne.n	80025ae <xQueueReceive+0x122>
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ba:	d103      	bne.n	80025c4 <xQueueReceive+0x138>
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025c4:	f002 f85e 	bl	8004684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025c8:	1d3a      	adds	r2, r7, #4
 80025ca:	f107 0310 	add.w	r3, r7, #16
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 f82f 	bl	8003634 <xTaskCheckForTimeOut>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d123      	bne.n	8002624 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025de:	f000 fa3b 	bl	8002a58 <prvIsQueueEmpty>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d017      	beq.n	8002618 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	3324      	adds	r3, #36	; 0x24
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 ff53 	bl	800349c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025f8:	f000 f9dc 	bl	80029b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025fc:	f000 fd5a 	bl	80030b4 <xTaskResumeAll>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d189      	bne.n	800251a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <xQueueReceive+0x1bc>)
 8002608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	e780      	b.n	800251a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800261a:	f000 f9cb 	bl	80029b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800261e:	f000 fd49 	bl	80030b4 <xTaskResumeAll>
 8002622:	e77a      	b.n	800251a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002626:	f000 f9c5 	bl	80029b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800262a:	f000 fd43 	bl	80030b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800262e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002630:	f000 fa12 	bl	8002a58 <prvIsQueueEmpty>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	f43f af6f 	beq.w	800251a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800263c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800263e:	4618      	mov	r0, r3
 8002640:	3730      	adds	r7, #48	; 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002656:	2300      	movs	r3, #0
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800265e:	2300      	movs	r3, #0
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	623b      	str	r3, [r7, #32]
}
 800267a:	bf00      	nop
 800267c:	e7fe      	b.n	800267c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	61fb      	str	r3, [r7, #28]
}
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800269c:	f001 f968 	bl	8003970 <xTaskGetSchedulerState>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <xQueueSemaphoreTake+0x60>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <xQueueSemaphoreTake+0x64>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <xQueueSemaphoreTake+0x66>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10a      	bne.n	80026cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	61bb      	str	r3, [r7, #24]
}
 80026c8:	bf00      	nop
 80026ca:	e7fe      	b.n	80026ca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026cc:	f001 ffaa 	bl	8004624 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d024      	beq.n	8002726 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	1e5a      	subs	r2, r3, #1
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80026ec:	f001 fab6 	bl	8003c5c <pvTaskIncrementMutexHeldCount>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00f      	beq.n	800271e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	3310      	adds	r3, #16
 8002702:	4618      	mov	r0, r3
 8002704:	f000 ff1a 	bl	800353c <xTaskRemoveFromEventList>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800270e:	4b54      	ldr	r3, [pc, #336]	; (8002860 <xQueueSemaphoreTake+0x214>)
 8002710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800271e:	f001 ffb1 	bl	8004684 <vPortExitCritical>
				return pdPASS;
 8002722:	2301      	movs	r3, #1
 8002724:	e097      	b.n	8002856 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	617b      	str	r3, [r7, #20]
}
 8002744:	bf00      	nop
 8002746:	e7fe      	b.n	8002746 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002748:	f001 ff9c 	bl	8004684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800274c:	2300      	movs	r3, #0
 800274e:	e082      	b.n	8002856 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	4618      	mov	r0, r3
 800275c:	f000 ff54 	bl	8003608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002760:	2301      	movs	r3, #1
 8002762:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002764:	f001 ff8e 	bl	8004684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002768:	f000 fc5e 	bl	8003028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800276c:	f001 ff5a 	bl	8004624 <vPortEnterCritical>
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002776:	b25b      	sxtb	r3, r3
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d103      	bne.n	8002786 <xQueueSemaphoreTake+0x13a>
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800278c:	b25b      	sxtb	r3, r3
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d103      	bne.n	800279c <xQueueSemaphoreTake+0x150>
 8002794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800279c:	f001 ff72 	bl	8004684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027a0:	463a      	mov	r2, r7
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 ff43 	bl	8003634 <xTaskCheckForTimeOut>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d132      	bne.n	800281a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027b6:	f000 f94f 	bl	8002a58 <prvIsQueueEmpty>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d026      	beq.n	800280e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80027c8:	f001 ff2c 	bl	8004624 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 f8eb 	bl	80039ac <xTaskPriorityInherit>
 80027d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80027d8:	f001 ff54 	bl	8004684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fe59 	bl	800349c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027ec:	f000 f8e2 	bl	80029b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027f0:	f000 fc60 	bl	80030b4 <xTaskResumeAll>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f47f af68 	bne.w	80026cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <xQueueSemaphoreTake+0x214>)
 80027fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	e75e      	b.n	80026cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800280e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002810:	f000 f8d0 	bl	80029b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002814:	f000 fc4e 	bl	80030b4 <xTaskResumeAll>
 8002818:	e758      	b.n	80026cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800281a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800281c:	f000 f8ca 	bl	80029b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002820:	f000 fc48 	bl	80030b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002824:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002826:	f000 f917 	bl	8002a58 <prvIsQueueEmpty>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	f43f af4d 	beq.w	80026cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002838:	f001 fef4 	bl	8004624 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800283c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800283e:	f000 f811 	bl	8002864 <prvGetDisinheritPriorityAfterTimeout>
 8002842:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f984 	bl	8003b58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002850:	f001 ff18 	bl	8004684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002854:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002856:	4618      	mov	r0, r3
 8002858:	3738      	adds	r7, #56	; 0x38
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000ed04 	.word	0xe000ed04

08002864 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e001      	b.n	8002886 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002886:	68fb      	ldr	r3, [r7, #12]
	}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d14d      	bne.n	8002956 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 f8dc 	bl	8003a7c <xTaskPriorityDisinherit>
 80028c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e043      	b.n	8002956 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d119      	bne.n	8002908 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6858      	ldr	r0, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	461a      	mov	r2, r3
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	f002 fb0c 	bl	8004efc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	441a      	add	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d32b      	bcc.n	8002956 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e026      	b.n	8002956 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68d8      	ldr	r0, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	461a      	mov	r2, r3
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	f002 faf2 	bl	8004efc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	425b      	negs	r3, r3
 8002922:	441a      	add	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d207      	bcs.n	8002944 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	425b      	negs	r3, r3
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d105      	bne.n	8002956 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	3b01      	subs	r3, #1
 8002954:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800295e:	697b      	ldr	r3, [r7, #20]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d018      	beq.n	80029ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	d303      	bcc.n	800299c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68d9      	ldr	r1, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	461a      	mov	r2, r3
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f002 faa8 	bl	8004efc <memcpy>
	}
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029bc:	f001 fe32 	bl	8004624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029c8:	e011      	b.n	80029ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3324      	adds	r3, #36	; 0x24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fdb0 	bl	800353c <xTaskRemoveFromEventList>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029e2:	f000 fe89 	bl	80036f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	dce9      	bgt.n	80029ca <prvUnlockQueue+0x16>
 80029f6:	e000      	b.n	80029fa <prvUnlockQueue+0x46>
					break;
 80029f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a02:	f001 fe3f 	bl	8004684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a06:	f001 fe0d 	bl	8004624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a12:	e011      	b.n	8002a38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3310      	adds	r3, #16
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fd8b 	bl	800353c <xTaskRemoveFromEventList>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a2c:	f000 fe64 	bl	80036f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dce9      	bgt.n	8002a14 <prvUnlockQueue+0x60>
 8002a40:	e000      	b.n	8002a44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a4c:	f001 fe1a 	bl	8004684 <vPortExitCritical>
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a60:	f001 fde0 	bl	8004624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e001      	b.n	8002a76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a76:	f001 fe05 	bl	8004684 <vPortExitCritical>

	return xReturn;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a8c:	f001 fdca 	bl	8004624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d102      	bne.n	8002aa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e001      	b.n	8002aa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aa6:	f001 fded 	bl	8004684 <vPortExitCritical>

	return xReturn;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e014      	b.n	8002aee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ac4:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <vQueueAddToRegistry+0x50>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ad0:	490c      	ldr	r1, [pc, #48]	; (8002b04 <vQueueAddToRegistry+0x50>)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <vQueueAddToRegistry+0x50>)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ae6:	e006      	b.n	8002af6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3301      	adds	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b07      	cmp	r3, #7
 8002af2:	d9e7      	bls.n	8002ac4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000828 	.word	0x20000828

08002b08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b18:	f001 fd84 	bl	8004624 <vPortEnterCritical>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d103      	bne.n	8002b32 <vQueueWaitForMessageRestricted+0x2a>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d103      	bne.n	8002b48 <vQueueWaitForMessageRestricted+0x40>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b48:	f001 fd9c 	bl	8004684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d106      	bne.n	8002b62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fcc1 	bl	80034e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f7ff ff26 	bl	80029b4 <prvUnlockQueue>
	}
 8002b68:	bf00      	nop
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08e      	sub	sp, #56	; 0x38
 8002b74:	af04      	add	r7, sp, #16
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	623b      	str	r3, [r7, #32]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	61fb      	str	r3, [r7, #28]
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bb6:	23a8      	movs	r3, #168	; 0xa8
 8002bb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2ba8      	cmp	r3, #168	; 0xa8
 8002bbe:	d00a      	beq.n	8002bd6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	61bb      	str	r3, [r7, #24]
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01e      	beq.n	8002c1c <xTaskCreateStatic+0xac>
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9303      	str	r3, [sp, #12]
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	9302      	str	r3, [sp, #8]
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f850 	bl	8002cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c16:	f000 f8f3 	bl	8002e00 <prvAddNewTaskToReadyList>
 8002c1a:	e001      	b.n	8002c20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c20:	697b      	ldr	r3, [r7, #20]
	}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3728      	adds	r7, #40	; 0x28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08c      	sub	sp, #48	; 0x30
 8002c2e:	af04      	add	r7, sp, #16
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 feee 	bl	8004a20 <pvPortMalloc>
 8002c44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c4c:	20a8      	movs	r0, #168	; 0xa8
 8002c4e:	f001 fee7 	bl	8004a20 <pvPortMalloc>
 8002c52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c60:	e005      	b.n	8002c6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f001 ffa8 	bl	8004bb8 <vPortFree>
 8002c68:	e001      	b.n	8002c6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d017      	beq.n	8002ca4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c7c:	88fa      	ldrh	r2, [r7, #6]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9303      	str	r3, [sp, #12]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	9302      	str	r3, [sp, #8]
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f80e 	bl	8002cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c98:	69f8      	ldr	r0, [r7, #28]
 8002c9a:	f000 f8b1 	bl	8002e00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e002      	b.n	8002caa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002caa:	69bb      	ldr	r3, [r7, #24]
	}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	21a5      	movs	r1, #165	; 0xa5
 8002cce:	f002 f891 	bl	8004df4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f023 0307 	bic.w	r3, r3, #7
 8002cea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <prvInitialiseNewTask+0x58>
	__asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	617b      	str	r3, [r7, #20]
}
 8002d08:	bf00      	nop
 8002d0a:	e7fe      	b.n	8002d0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01f      	beq.n	8002d52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e012      	b.n	8002d3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	7819      	ldrb	r1, [r3, #0]
 8002d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4413      	add	r3, r2
 8002d26:	3334      	adds	r3, #52	; 0x34
 8002d28:	460a      	mov	r2, r1
 8002d2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d9e9      	bls.n	8002d18 <prvInitialiseNewTask+0x64>
 8002d44:	e000      	b.n	8002d48 <prvInitialiseNewTask+0x94>
			{
				break;
 8002d46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d50:	e003      	b.n	8002d5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	2b37      	cmp	r3, #55	; 0x37
 8002d5e:	d901      	bls.n	8002d64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d60:	2337      	movs	r3, #55	; 0x37
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	2200      	movs	r2, #0
 8002d74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe ff8e 	bl	8001c9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	3318      	adds	r3, #24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe ff89 	bl	8001c9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	3354      	adds	r3, #84	; 0x54
 8002db4:	224c      	movs	r2, #76	; 0x4c
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 f81b 	bl	8004df4 <memset>
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <prvInitialiseNewTask+0x140>)
 8002dc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <prvInitialiseNewTask+0x144>)
 8002dc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <prvInitialiseNewTask+0x148>)
 8002dce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	69b8      	ldr	r0, [r7, #24]
 8002dd6:	f001 faf7 	bl	80043c8 <pxPortInitialiseStack>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dec:	bf00      	nop
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20001a80 	.word	0x20001a80
 8002df8:	20001ae8 	.word	0x20001ae8
 8002dfc:	20001b50 	.word	0x20001b50

08002e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e08:	f001 fc0c 	bl	8004624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <prvAddNewTaskToReadyList+0xc4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a2c      	ldr	r2, [pc, #176]	; (8002ec4 <prvAddNewTaskToReadyList+0xc4>)
 8002e14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <prvAddNewTaskToReadyList+0xc8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e1e:	4a2a      	ldr	r2, [pc, #168]	; (8002ec8 <prvAddNewTaskToReadyList+0xc8>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <prvAddNewTaskToReadyList+0xc4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d110      	bne.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e2c:	f000 fcde 	bl	80037ec <prvInitialiseTaskLists>
 8002e30:	e00d      	b.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e32:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <prvAddNewTaskToReadyList+0xcc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <prvAddNewTaskToReadyList+0xc8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d802      	bhi.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e48:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <prvAddNewTaskToReadyList+0xc8>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <prvAddNewTaskToReadyList+0xd0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <prvAddNewTaskToReadyList+0xd0>)
 8002e56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <prvAddNewTaskToReadyList+0xd0>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <prvAddNewTaskToReadyList+0xd4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d903      	bls.n	8002e74 <prvAddNewTaskToReadyList+0x74>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <prvAddNewTaskToReadyList+0xd4>)
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <prvAddNewTaskToReadyList+0xd8>)
 8002e82:	441a      	add	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7fe ff13 	bl	8001cb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e90:	f001 fbf8 	bl	8004684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <prvAddNewTaskToReadyList+0xcc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <prvAddNewTaskToReadyList+0xc8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d207      	bcs.n	8002eba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <prvAddNewTaskToReadyList+0xdc>)
 8002eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000d3c 	.word	0x20000d3c
 8002ec8:	20000868 	.word	0x20000868
 8002ecc:	20000d48 	.word	0x20000d48
 8002ed0:	20000d58 	.word	0x20000d58
 8002ed4:	20000d44 	.word	0x20000d44
 8002ed8:	2000086c 	.word	0x2000086c
 8002edc:	e000ed04 	.word	0xe000ed04

08002ee0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d017      	beq.n	8002f22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <vTaskDelay+0x60>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <vTaskDelay+0x30>
	__asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	60bb      	str	r3, [r7, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f10:	f000 f88a 	bl	8003028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f14:	2100      	movs	r1, #0
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 feb4 	bl	8003c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f1c:	f000 f8ca 	bl	80030b4 <xTaskResumeAll>
 8002f20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d107      	bne.n	8002f38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <vTaskDelay+0x64>)
 8002f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000d64 	.word	0x20000d64
 8002f44:	e000ed04 	.word	0xe000ed04

08002f48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f56:	463a      	mov	r2, r7
 8002f58:	1d39      	adds	r1, r7, #4
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fe48 	bl	8001bf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	9202      	str	r2, [sp, #8]
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2300      	movs	r3, #0
 8002f74:	460a      	mov	r2, r1
 8002f76:	4924      	ldr	r1, [pc, #144]	; (8003008 <vTaskStartScheduler+0xc0>)
 8002f78:	4824      	ldr	r0, [pc, #144]	; (800300c <vTaskStartScheduler+0xc4>)
 8002f7a:	f7ff fdf9 	bl	8002b70 <xTaskCreateStatic>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4a23      	ldr	r2, [pc, #140]	; (8003010 <vTaskStartScheduler+0xc8>)
 8002f82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f84:	4b22      	ldr	r3, [pc, #136]	; (8003010 <vTaskStartScheduler+0xc8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e001      	b.n	8002f96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d102      	bne.n	8002fa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f9c:	f000 fec6 	bl	8003d2c <xTimerCreateTimerTask>
 8002fa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d11b      	bne.n	8002fe0 <vTaskStartScheduler+0x98>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	613b      	str	r3, [r7, #16]
}
 8002fba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <vTaskStartScheduler+0xcc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3354      	adds	r3, #84	; 0x54
 8002fc2:	4a15      	ldr	r2, [pc, #84]	; (8003018 <vTaskStartScheduler+0xd0>)
 8002fc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <vTaskStartScheduler+0xd4>)
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <vTaskStartScheduler+0xd8>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <vTaskStartScheduler+0xdc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fda:	f001 fa81 	bl	80044e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fde:	e00e      	b.n	8002ffe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d10a      	bne.n	8002ffe <vTaskStartScheduler+0xb6>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	60fb      	str	r3, [r7, #12]
}
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <vTaskStartScheduler+0xb4>
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	08005000 	.word	0x08005000
 800300c:	08003711 	.word	0x08003711
 8003010:	20000d60 	.word	0x20000d60
 8003014:	20000868 	.word	0x20000868
 8003018:	2000005c 	.word	0x2000005c
 800301c:	20000d5c 	.word	0x20000d5c
 8003020:	20000d48 	.word	0x20000d48
 8003024:	20000d40 	.word	0x20000d40

08003028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <vTaskSuspendAll+0x18>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	4a03      	ldr	r2, [pc, #12]	; (8003040 <vTaskSuspendAll+0x18>)
 8003034:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	20000d64 	.word	0x20000d64

08003044 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800304a:	2300      	movs	r3, #0
 800304c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <prvGetExpectedIdleTime+0x5c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8003056:	2301      	movs	r3, #1
 8003058:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <prvGetExpectedIdleTime+0x60>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	e012      	b.n	8003090 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <prvGetExpectedIdleTime+0x64>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d902      	bls.n	8003078 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	e00b      	b.n	8003090 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	e005      	b.n	8003090 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <prvGetExpectedIdleTime+0x68>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <prvGetExpectedIdleTime+0x6c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8003090:	687b      	ldr	r3, [r7, #4]
	}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000d44 	.word	0x20000d44
 80030a4:	20000868 	.word	0x20000868
 80030a8:	2000086c 	.word	0x2000086c
 80030ac:	20000d5c 	.word	0x20000d5c
 80030b0:	20000d40 	.word	0x20000d40

080030b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030c2:	4b42      	ldr	r3, [pc, #264]	; (80031cc <xTaskResumeAll+0x118>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	603b      	str	r3, [r7, #0]
}
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030e0:	f001 faa0 	bl	8004624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030e4:	4b39      	ldr	r3, [pc, #228]	; (80031cc <xTaskResumeAll+0x118>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	4a38      	ldr	r2, [pc, #224]	; (80031cc <xTaskResumeAll+0x118>)
 80030ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ee:	4b37      	ldr	r3, [pc, #220]	; (80031cc <xTaskResumeAll+0x118>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d162      	bne.n	80031bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030f6:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <xTaskResumeAll+0x11c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d05e      	beq.n	80031bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030fe:	e02f      	b.n	8003160 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003100:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <xTaskResumeAll+0x120>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3318      	adds	r3, #24
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fe2f 	bl	8001d70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3304      	adds	r3, #4
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fe2a 	bl	8001d70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <xTaskResumeAll+0x124>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d903      	bls.n	8003130 <xTaskResumeAll+0x7c>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	4a2a      	ldr	r2, [pc, #168]	; (80031d8 <xTaskResumeAll+0x124>)
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4a27      	ldr	r2, [pc, #156]	; (80031dc <xTaskResumeAll+0x128>)
 800313e:	441a      	add	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f7fe fdb5 	bl	8001cb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <xTaskResumeAll+0x12c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <xTaskResumeAll+0x130>)
 800315c:	2201      	movs	r2, #1
 800315e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <xTaskResumeAll+0x120>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1cb      	bne.n	8003100 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800316e:	f000 fbdf 	bl	8003930 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <xTaskResumeAll+0x134>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800317e:	f000 f86f 	bl	8003260 <xTaskIncrementTick>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <xTaskResumeAll+0x130>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3b01      	subs	r3, #1
 8003192:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f1      	bne.n	800317e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <xTaskResumeAll+0x134>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <xTaskResumeAll+0x130>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <xTaskResumeAll+0x138>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031bc:	f001 fa62 	bl	8004684 <vPortExitCritical>

	return xAlreadyYielded;
 80031c0:	68bb      	ldr	r3, [r7, #8]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000d64 	.word	0x20000d64
 80031d0:	20000d3c 	.word	0x20000d3c
 80031d4:	20000cfc 	.word	0x20000cfc
 80031d8:	20000d44 	.word	0x20000d44
 80031dc:	2000086c 	.word	0x2000086c
 80031e0:	20000868 	.word	0x20000868
 80031e4:	20000d50 	.word	0x20000d50
 80031e8:	20000d4c 	.word	0x20000d4c
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <xTaskGetTickCount+0x1c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031fc:	687b      	ldr	r3, [r7, #4]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000d40 	.word	0x20000d40

08003210 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <vTaskStepTick+0x48>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	441a      	add	r2, r3
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <vTaskStepTick+0x4c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d90a      	bls.n	800323e <vTaskStepTick+0x2e>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	60fb      	str	r3, [r7, #12]
}
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <vTaskStepTick+0x48>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <vTaskStepTick+0x48>)
 8003248:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000d40 	.word	0x20000d40
 800325c:	20000d5c 	.word	0x20000d5c

08003260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326a:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <xTaskIncrementTick+0x148>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 808f 	bne.w	8003392 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003274:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <xTaskIncrementTick+0x14c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800327c:	4a4b      	ldr	r2, [pc, #300]	; (80033ac <xTaskIncrementTick+0x14c>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d120      	bne.n	80032ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003288:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <xTaskIncrementTick+0x150>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	603b      	str	r3, [r7, #0]
}
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <xTaskIncrementTick+0x46>
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <xTaskIncrementTick+0x150>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <xTaskIncrementTick+0x154>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a3f      	ldr	r2, [pc, #252]	; (80033b0 <xTaskIncrementTick+0x150>)
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4a3f      	ldr	r2, [pc, #252]	; (80033b4 <xTaskIncrementTick+0x154>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <xTaskIncrementTick+0x158>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a3d      	ldr	r2, [pc, #244]	; (80033b8 <xTaskIncrementTick+0x158>)
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	f000 fb33 	bl	8003930 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032ca:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <xTaskIncrementTick+0x15c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d349      	bcc.n	8003368 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <xTaskIncrementTick+0x150>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d104      	bne.n	80032e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <xTaskIncrementTick+0x15c>)
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	601a      	str	r2, [r3, #0]
					break;
 80032e6:	e03f      	b.n	8003368 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e8:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <xTaskIncrementTick+0x150>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d203      	bcs.n	8003308 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003300:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <xTaskIncrementTick+0x15c>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003306:	e02f      	b.n	8003368 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3304      	adds	r3, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fd2f 	bl	8001d70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	3318      	adds	r3, #24
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fd26 	bl	8001d70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <xTaskIncrementTick+0x160>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d903      	bls.n	8003338 <xTaskIncrementTick+0xd8>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <xTaskIncrementTick+0x160>)
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <xTaskIncrementTick+0x164>)
 8003346:	441a      	add	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f7fe fcb1 	bl	8001cb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <xTaskIncrementTick+0x168>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	429a      	cmp	r2, r3
 8003360:	d3b8      	bcc.n	80032d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003362:	2301      	movs	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003366:	e7b5      	b.n	80032d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003368:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <xTaskIncrementTick+0x168>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336e:	4915      	ldr	r1, [pc, #84]	; (80033c4 <xTaskIncrementTick+0x164>)
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d901      	bls.n	8003384 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003380:	2301      	movs	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <xTaskIncrementTick+0x16c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800338c:	2301      	movs	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e004      	b.n	800339c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <xTaskIncrementTick+0x170>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3301      	adds	r3, #1
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <xTaskIncrementTick+0x170>)
 800339a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800339c:	697b      	ldr	r3, [r7, #20]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000d64 	.word	0x20000d64
 80033ac:	20000d40 	.word	0x20000d40
 80033b0:	20000cf4 	.word	0x20000cf4
 80033b4:	20000cf8 	.word	0x20000cf8
 80033b8:	20000d54 	.word	0x20000d54
 80033bc:	20000d5c 	.word	0x20000d5c
 80033c0:	20000d44 	.word	0x20000d44
 80033c4:	2000086c 	.word	0x2000086c
 80033c8:	20000868 	.word	0x20000868
 80033cc:	20000d50 	.word	0x20000d50
 80033d0:	20000d4c 	.word	0x20000d4c

080033d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <vTaskSwitchContext+0xb0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <vTaskSwitchContext+0xb4>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033e8:	e046      	b.n	8003478 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80033ea:	4b27      	ldr	r3, [pc, #156]	; (8003488 <vTaskSwitchContext+0xb4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f0:	4b26      	ldr	r3, [pc, #152]	; (800348c <vTaskSwitchContext+0xb8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	e010      	b.n	800341a <vTaskSwitchContext+0x46>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <vTaskSwitchContext+0x40>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	607b      	str	r3, [r7, #4]
}
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <vTaskSwitchContext+0x3e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3b01      	subs	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	491d      	ldr	r1, [pc, #116]	; (8003490 <vTaskSwitchContext+0xbc>)
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0e4      	beq.n	80033f8 <vTaskSwitchContext+0x24>
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <vTaskSwitchContext+0xbc>)
 800343a:	4413      	add	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	3308      	adds	r3, #8
 8003450:	429a      	cmp	r2, r3
 8003452:	d104      	bne.n	800345e <vTaskSwitchContext+0x8a>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <vTaskSwitchContext+0xc0>)
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <vTaskSwitchContext+0xb8>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <vTaskSwitchContext+0xc0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3354      	adds	r3, #84	; 0x54
 8003474:	4a08      	ldr	r2, [pc, #32]	; (8003498 <vTaskSwitchContext+0xc4>)
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	20000d64 	.word	0x20000d64
 8003488:	20000d50 	.word	0x20000d50
 800348c:	20000d44 	.word	0x20000d44
 8003490:	2000086c 	.word	0x2000086c
 8003494:	20000868 	.word	0x20000868
 8003498:	2000005c 	.word	0x2000005c

0800349c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	60fb      	str	r3, [r7, #12]
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <vTaskPlaceOnEventList+0x44>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3318      	adds	r3, #24
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe fc17 	bl	8001cfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034d0:	2101      	movs	r1, #1
 80034d2:	6838      	ldr	r0, [r7, #0]
 80034d4:	f000 fbd6 	bl	8003c84 <prvAddCurrentTaskToDelayedList>
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000868 	.word	0x20000868

080034e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	617b      	str	r3, [r7, #20]
}
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <vTaskPlaceOnEventListRestricted+0x54>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3318      	adds	r3, #24
 8003512:	4619      	mov	r1, r3
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7fe fbce 	bl	8001cb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	68b8      	ldr	r0, [r7, #8]
 800352a:	f000 fbab 	bl	8003c84 <prvAddCurrentTaskToDelayedList>
	}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000868 	.word	0x20000868

0800353c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60fb      	str	r3, [r7, #12]
}
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3318      	adds	r3, #24
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe fbff 	bl	8001d70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003572:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <xTaskRemoveFromEventList+0xb4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d11f      	bne.n	80035ba <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	3304      	adds	r3, #4
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fbf6 	bl	8001d70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <xTaskRemoveFromEventList+0xb8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d903      	bls.n	8003598 <xTaskRemoveFromEventList+0x5c>
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <xTaskRemoveFromEventList+0xb8>)
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <xTaskRemoveFromEventList+0xbc>)
 80035a6:	441a      	add	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	3304      	adds	r3, #4
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f7fe fb81 	bl	8001cb6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80035b4:	f000 f9bc 	bl	8003930 <prvResetNextTaskUnblockTime>
 80035b8:	e005      	b.n	80035c6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	3318      	adds	r3, #24
 80035be:	4619      	mov	r1, r3
 80035c0:	480e      	ldr	r0, [pc, #56]	; (80035fc <xTaskRemoveFromEventList+0xc0>)
 80035c2:	f7fe fb78 	bl	8001cb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <xTaskRemoveFromEventList+0xc4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d905      	bls.n	80035e0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <xTaskRemoveFromEventList+0xc8>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e001      	b.n	80035e4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80035e4:	697b      	ldr	r3, [r7, #20]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000d64 	.word	0x20000d64
 80035f4:	20000d44 	.word	0x20000d44
 80035f8:	2000086c 	.word	0x2000086c
 80035fc:	20000cfc 	.word	0x20000cfc
 8003600:	20000868 	.word	0x20000868
 8003604:	20000d50 	.word	0x20000d50

08003608 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <vTaskInternalSetTimeOutState+0x24>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <vTaskInternalSetTimeOutState+0x28>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	605a      	str	r2, [r3, #4]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20000d54 	.word	0x20000d54
 8003630:	20000d40 	.word	0x20000d40

08003634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	613b      	str	r3, [r7, #16]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	60fb      	str	r3, [r7, #12]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003676:	f000 ffd5 	bl	8004624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <xTaskCheckForTimeOut+0xbc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d102      	bne.n	800369a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e023      	b.n	80036e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <xTaskCheckForTimeOut+0xc0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d007      	beq.n	80036b6 <xTaskCheckForTimeOut+0x82>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d302      	bcc.n	80036b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	e015      	b.n	80036e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d20b      	bcs.n	80036d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	1ad2      	subs	r2, r2, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff9b 	bl	8003608 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e004      	b.n	80036e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036de:	2301      	movs	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036e2:	f000 ffcf 	bl	8004684 <vPortExitCritical>

	return xReturn;
 80036e6:	69fb      	ldr	r3, [r7, #28]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000d40 	.word	0x20000d40
 80036f4:	20000d54 	.word	0x20000d54

080036f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <vTaskMissedYield+0x14>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	20000d50 	.word	0x20000d50

08003710 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003718:	f000 f8a8 	bl	800386c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <prvIdleTask+0x70>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d907      	bls.n	8003734 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <prvIdleTask+0x74>)
 8003726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8003734:	f7ff fc86 	bl	8003044 <prvGetExpectedIdleTime>
 8003738:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b31      	cmp	r3, #49	; 0x31
 800373e:	d9eb      	bls.n	8003718 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8003740:	f7ff fc72 	bl	8003028 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <prvIdleTask+0x78>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <prvIdleTask+0x7c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d20a      	bcs.n	8003766 <prvIdleTask+0x56>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	60bb      	str	r3, [r7, #8]
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8003766:	f7ff fc6d 	bl	8003044 <prvGetExpectedIdleTime>
 800376a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b31      	cmp	r3, #49	; 0x31
 8003770:	d902      	bls.n	8003778 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f001 f80a 	bl	800478c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8003778:	f7ff fc9c 	bl	80030b4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800377c:	e7cc      	b.n	8003718 <prvIdleTask+0x8>
 800377e:	bf00      	nop
 8003780:	2000086c 	.word	0x2000086c
 8003784:	e000ed04 	.word	0xe000ed04
 8003788:	20000d5c 	.word	0x20000d5c
 800378c:	20000d40 	.word	0x20000d40

08003790 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8003796:	2301      	movs	r3, #1
 8003798:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800379a:	2301      	movs	r3, #1
 800379c:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <eTaskConfirmSleepModeStatus+0x4c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80037a6:	2300      	movs	r3, #0
 80037a8:	71fb      	strb	r3, [r7, #7]
 80037aa:	e010      	b.n	80037ce <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <eTaskConfirmSleepModeStatus+0x50>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80037b4:	2300      	movs	r3, #0
 80037b6:	71fb      	strb	r3, [r7, #7]
 80037b8:	e009      	b.n	80037ce <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <eTaskConfirmSleepModeStatus+0x54>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <eTaskConfirmSleepModeStatus+0x58>)
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	1acb      	subs	r3, r1, r3
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d101      	bne.n	80037ce <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80037ca:	2302      	movs	r3, #2
 80037cc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80037ce:	79fb      	ldrb	r3, [r7, #7]
	}
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20000cfc 	.word	0x20000cfc
 80037e0:	20000d50 	.word	0x20000d50
 80037e4:	20000d28 	.word	0x20000d28
 80037e8:	20000d3c 	.word	0x20000d3c

080037ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037f2:	2300      	movs	r3, #0
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	e00c      	b.n	8003812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4a12      	ldr	r2, [pc, #72]	; (800384c <prvInitialiseTaskLists+0x60>)
 8003804:	4413      	add	r3, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fa28 	bl	8001c5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3301      	adds	r3, #1
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b37      	cmp	r3, #55	; 0x37
 8003816:	d9ef      	bls.n	80037f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003818:	480d      	ldr	r0, [pc, #52]	; (8003850 <prvInitialiseTaskLists+0x64>)
 800381a:	f7fe fa1f 	bl	8001c5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800381e:	480d      	ldr	r0, [pc, #52]	; (8003854 <prvInitialiseTaskLists+0x68>)
 8003820:	f7fe fa1c 	bl	8001c5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <prvInitialiseTaskLists+0x6c>)
 8003826:	f7fe fa19 	bl	8001c5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800382a:	480c      	ldr	r0, [pc, #48]	; (800385c <prvInitialiseTaskLists+0x70>)
 800382c:	f7fe fa16 	bl	8001c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003830:	480b      	ldr	r0, [pc, #44]	; (8003860 <prvInitialiseTaskLists+0x74>)
 8003832:	f7fe fa13 	bl	8001c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <prvInitialiseTaskLists+0x78>)
 8003838:	4a05      	ldr	r2, [pc, #20]	; (8003850 <prvInitialiseTaskLists+0x64>)
 800383a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <prvInitialiseTaskLists+0x7c>)
 800383e:	4a05      	ldr	r2, [pc, #20]	; (8003854 <prvInitialiseTaskLists+0x68>)
 8003840:	601a      	str	r2, [r3, #0]
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	2000086c 	.word	0x2000086c
 8003850:	20000ccc 	.word	0x20000ccc
 8003854:	20000ce0 	.word	0x20000ce0
 8003858:	20000cfc 	.word	0x20000cfc
 800385c:	20000d10 	.word	0x20000d10
 8003860:	20000d28 	.word	0x20000d28
 8003864:	20000cf4 	.word	0x20000cf4
 8003868:	20000cf8 	.word	0x20000cf8

0800386c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003872:	e019      	b.n	80038a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003874:	f000 fed6 	bl	8004624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003878:	4b10      	ldr	r3, [pc, #64]	; (80038bc <prvCheckTasksWaitingTermination+0x50>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe fa73 	bl	8001d70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <prvCheckTasksWaitingTermination+0x54>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3b01      	subs	r3, #1
 8003890:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <prvCheckTasksWaitingTermination+0x54>)
 8003892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <prvCheckTasksWaitingTermination+0x58>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3b01      	subs	r3, #1
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <prvCheckTasksWaitingTermination+0x58>)
 800389c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800389e:	f000 fef1 	bl	8004684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f810 	bl	80038c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <prvCheckTasksWaitingTermination+0x58>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e1      	bne.n	8003874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000d10 	.word	0x20000d10
 80038c0:	20000d3c 	.word	0x20000d3c
 80038c4:	20000d24 	.word	0x20000d24

080038c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3354      	adds	r3, #84	; 0x54
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 fa95 	bl	8004e04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d108      	bne.n	80038f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 f965 	bl	8004bb8 <vPortFree>
				vPortFree( pxTCB );
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f001 f962 	bl	8004bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038f4:	e018      	b.n	8003928 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d103      	bne.n	8003908 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f001 f959 	bl	8004bb8 <vPortFree>
	}
 8003906:	e00f      	b.n	8003928 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800390e:	2b02      	cmp	r3, #2
 8003910:	d00a      	beq.n	8003928 <prvDeleteTCB+0x60>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	60fb      	str	r3, [r7, #12]
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <prvDeleteTCB+0x5e>
	}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <prvResetNextTaskUnblockTime+0x38>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <prvResetNextTaskUnblockTime+0x3c>)
 8003942:	f04f 32ff 	mov.w	r2, #4294967295
 8003946:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003948:	e008      	b.n	800395c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <prvResetNextTaskUnblockTime+0x38>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <prvResetNextTaskUnblockTime+0x3c>)
 800395a:	6013      	str	r3, [r2, #0]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	20000cf4 	.word	0x20000cf4
 800396c:	20000d5c 	.word	0x20000d5c

08003970 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003976:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <xTaskGetSchedulerState+0x34>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800397e:	2301      	movs	r3, #1
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	e008      	b.n	8003996 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <xTaskGetSchedulerState+0x38>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800398c:	2302      	movs	r3, #2
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	e001      	b.n	8003996 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003996:	687b      	ldr	r3, [r7, #4]
	}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	20000d48 	.word	0x20000d48
 80039a8:	20000d64 	.word	0x20000d64

080039ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d051      	beq.n	8003a66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c6:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <xTaskPriorityInherit+0xc4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d241      	bcs.n	8003a54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db06      	blt.n	80039e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d8:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <xTaskPriorityInherit+0xc4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6959      	ldr	r1, [r3, #20]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <xTaskPriorityInherit+0xc8>)
 80039f8:	4413      	add	r3, r2
 80039fa:	4299      	cmp	r1, r3
 80039fc:	d122      	bne.n	8003a44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe f9b4 	bl	8001d70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <xTaskPriorityInherit+0xc4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <xTaskPriorityInherit+0xcc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d903      	bls.n	8003a26 <xTaskPriorityInherit+0x7a>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <xTaskPriorityInherit+0xcc>)
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <xTaskPriorityInherit+0xc8>)
 8003a34:	441a      	add	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7fe f93a 	bl	8001cb6 <vListInsertEnd>
 8003a42:	e004      	b.n	8003a4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <xTaskPriorityInherit+0xc4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	e008      	b.n	8003a66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <xTaskPriorityInherit+0xc4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d201      	bcs.n	8003a66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a66:	68fb      	ldr	r3, [r7, #12]
	}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000868 	.word	0x20000868
 8003a74:	2000086c 	.word	0x2000086c
 8003a78:	20000d44 	.word	0x20000d44

08003a7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d056      	beq.n	8003b40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a92:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <xTaskPriorityDisinherit+0xd0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d00a      	beq.n	8003ab2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	60fb      	str	r3, [r7, #12]
}
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	60bb      	str	r3, [r7, #8]
}
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d02c      	beq.n	8003b40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d128      	bne.n	8003b40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe f93c 	bl	8001d70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <xTaskPriorityDisinherit+0xd4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d903      	bls.n	8003b20 <xTaskPriorityDisinherit+0xa4>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <xTaskPriorityDisinherit+0xd4>)
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <xTaskPriorityDisinherit+0xd8>)
 8003b2e:	441a      	add	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f7fe f8bd 	bl	8001cb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b40:	697b      	ldr	r3, [r7, #20]
	}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000868 	.word	0x20000868
 8003b50:	20000d44 	.word	0x20000d44
 8003b54:	2000086c 	.word	0x2000086c

08003b58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d06a      	beq.n	8003c46 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	60fb      	str	r3, [r7, #12]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d902      	bls.n	8003b9e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e002      	b.n	8003ba4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d04b      	beq.n	8003c46 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d146      	bne.n	8003c46 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003bb8:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10a      	bne.n	8003bd8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	60bb      	str	r3, [r7, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	db04      	blt.n	8003bf6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	6959      	ldr	r1, [r3, #20]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003c06:	4413      	add	r3, r2
 8003c08:	4299      	cmp	r1, r3
 8003c0a:	d11c      	bne.n	8003c46 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe f8ad 	bl	8001d70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d903      	bls.n	8003c2a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	4a0c      	ldr	r2, [pc, #48]	; (8003c58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003c38:	441a      	add	r2, r3
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7fe f838 	bl	8001cb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c46:	bf00      	nop
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000868 	.word	0x20000868
 8003c54:	2000086c 	.word	0x2000086c
 8003c58:	20000d44 	.word	0x20000d44

08003c5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d004      	beq.n	8003c72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c6e:	3201      	adds	r2, #1
 8003c70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003c72:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c74:	681b      	ldr	r3, [r3, #0]
	}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	20000868 	.word	0x20000868

08003c84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c8e:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c94:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe f868 	bl	8001d70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d10a      	bne.n	8003cbe <prvAddCurrentTaskToDelayedList+0x3a>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4819      	ldr	r0, [pc, #100]	; (8003d1c <prvAddCurrentTaskToDelayedList+0x98>)
 8003cb8:	f7fd fffd 	bl	8001cb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cbc:	e026      	b.n	8003d0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d209      	bcs.n	8003cea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f7fe f80b 	bl	8001cfe <vListInsert>
}
 8003ce8:	e010      	b.n	8003d0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f7fe f801 	bl	8001cfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d202      	bcs.n	8003d0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d06:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6013      	str	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000d40 	.word	0x20000d40
 8003d18:	20000868 	.word	0x20000868
 8003d1c:	20000d28 	.word	0x20000d28
 8003d20:	20000cf8 	.word	0x20000cf8
 8003d24:	20000cf4 	.word	0x20000cf4
 8003d28:	20000d5c 	.word	0x20000d5c

08003d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d36:	f000 fb07 	bl	8004348 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <xTimerCreateTimerTask+0x80>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d021      	beq.n	8003d86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d4a:	1d3a      	adds	r2, r7, #4
 8003d4c:	f107 0108 	add.w	r1, r7, #8
 8003d50:	f107 030c 	add.w	r3, r7, #12
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd ff67 	bl	8001c28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	9202      	str	r2, [sp, #8]
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	2302      	movs	r3, #2
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	4910      	ldr	r1, [pc, #64]	; (8003db0 <xTimerCreateTimerTask+0x84>)
 8003d6e:	4811      	ldr	r0, [pc, #68]	; (8003db4 <xTimerCreateTimerTask+0x88>)
 8003d70:	f7fe fefe 	bl	8002b70 <xTaskCreateStatic>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <xTimerCreateTimerTask+0x8c>)
 8003d78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <xTimerCreateTimerTask+0x8c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d82:	2301      	movs	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	613b      	str	r3, [r7, #16]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003da2:	697b      	ldr	r3, [r7, #20]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000d98 	.word	0x20000d98
 8003db0:	08005008 	.word	0x08005008
 8003db4:	08003ef1 	.word	0x08003ef1
 8003db8:	20000d9c 	.word	0x20000d9c

08003dbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <xTimerGenericCommand+0x2e>
	__asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	623b      	str	r3, [r7, #32]
}
 8003de6:	bf00      	nop
 8003de8:	e7fe      	b.n	8003de8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003dea:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <xTimerGenericCommand+0x98>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d02a      	beq.n	8003e48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	dc18      	bgt.n	8003e36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e04:	f7ff fdb4 	bl	8003970 <xTaskGetSchedulerState>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d109      	bne.n	8003e22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <xTimerGenericCommand+0x98>)
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	f107 0110 	add.w	r1, r7, #16
 8003e16:	2300      	movs	r3, #0
 8003e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1a:	f7fe f911 	bl	8002040 <xQueueGenericSend>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8003e20:	e012      	b.n	8003e48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <xTimerGenericCommand+0x98>)
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	f107 0110 	add.w	r1, r7, #16
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f7fe f907 	bl	8002040 <xQueueGenericSend>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24
 8003e34:	e008      	b.n	8003e48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <xTimerGenericCommand+0x98>)
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	f107 0110 	add.w	r1, r7, #16
 8003e3e:	2300      	movs	r3, #0
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	f7fe f9fb 	bl	800223c <xQueueGenericSendFromISR>
 8003e46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3728      	adds	r7, #40	; 0x28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000d98 	.word	0x20000d98

08003e58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e62:	4b22      	ldr	r3, [pc, #136]	; (8003eec <prvProcessExpiredTimer+0x94>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fd ff7d 	bl	8001d70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d022      	beq.n	8003eca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	18d1      	adds	r1, r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	6978      	ldr	r0, [r7, #20]
 8003e92:	f000 f8d1 	bl	8004038 <prvInsertTimerInActiveList>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01f      	beq.n	8003edc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f7ff ff88 	bl	8003dbc <xTimerGenericCommand>
 8003eac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d113      	bne.n	8003edc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	6978      	ldr	r0, [r7, #20]
 8003ee2:	4798      	blx	r3
}
 8003ee4:	bf00      	nop
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000d90 	.word	0x20000d90

08003ef0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ef8:	f107 0308 	add.w	r3, r7, #8
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f857 	bl	8003fb0 <prvGetNextExpireTime>
 8003f02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4619      	mov	r1, r3
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f803 	bl	8003f14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f0e:	f000 f8d5 	bl	80040bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f12:	e7f1      	b.n	8003ef8 <prvTimerTask+0x8>

08003f14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f1e:	f7ff f883 	bl	8003028 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f866 	bl	8003ff8 <prvSampleTimeNow>
 8003f2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d130      	bne.n	8003f96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <prvProcessTimerOrBlockTask+0x3c>
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d806      	bhi.n	8003f50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f42:	f7ff f8b7 	bl	80030b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff85 	bl	8003e58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f4e:	e024      	b.n	8003f9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <prvProcessTimerOrBlockTask+0x90>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <prvProcessTimerOrBlockTask+0x50>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <prvProcessTimerOrBlockTask+0x52>
 8003f64:	2300      	movs	r3, #0
 8003f66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <prvProcessTimerOrBlockTask+0x94>)
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	f7fe fdc7 	bl	8002b08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f7a:	f7ff f89b 	bl	80030b4 <xTaskResumeAll>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <prvProcessTimerOrBlockTask+0x98>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
}
 8003f94:	e001      	b.n	8003f9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f96:	f7ff f88d 	bl	80030b4 <xTaskResumeAll>
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000d94 	.word	0x20000d94
 8003fa8:	20000d98 	.word	0x20000d98
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <prvGetNextExpireTime+0x44>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <prvGetNextExpireTime+0x16>
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	e000      	b.n	8003fc8 <prvGetNextExpireTime+0x18>
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fd4:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <prvGetNextExpireTime+0x44>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e001      	b.n	8003fe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000d90 	.word	0x20000d90

08003ff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004000:	f7ff f8f6 	bl	80031f0 <xTaskGetTickCount>
 8004004:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <prvSampleTimeNow+0x3c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d205      	bcs.n	800401c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004010:	f000 f936 	bl	8004280 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e002      	b.n	8004022 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004022:	4a04      	ldr	r2, [pc, #16]	; (8004034 <prvSampleTimeNow+0x3c>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004028:	68fb      	ldr	r3, [r7, #12]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000da0 	.word	0x20000da0

08004038 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	d812      	bhi.n	8004084 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	1ad2      	subs	r2, r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e01b      	b.n	80040aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <prvInsertTimerInActiveList+0x7c>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fd fe3e 	bl	8001cfe <vListInsert>
 8004082:	e012      	b.n	80040aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d206      	bcs.n	800409a <prvInsertTimerInActiveList+0x62>
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d302      	bcc.n	800409a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004094:	2301      	movs	r3, #1
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e007      	b.n	80040aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <prvInsertTimerInActiveList+0x80>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3304      	adds	r3, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f7fd fe2a 	bl	8001cfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80040aa:	697b      	ldr	r3, [r7, #20]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000d94 	.word	0x20000d94
 80040b8:	20000d90 	.word	0x20000d90

080040bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	; 0x38
 80040c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040c2:	e0ca      	b.n	800425a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	da18      	bge.n	80040fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	3304      	adds	r3, #4
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	61fb      	str	r3, [r7, #28]
}
 80040e8:	bf00      	nop
 80040ea:	e7fe      	b.n	80040ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f2:	6850      	ldr	r0, [r2, #4]
 80040f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f6:	6892      	ldr	r2, [r2, #8]
 80040f8:	4611      	mov	r1, r2
 80040fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f2c0 80ab 	blt.w	800425a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	3304      	adds	r3, #4
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd fe2b 	bl	8001d70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800411a:	463b      	mov	r3, r7
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff6b 	bl	8003ff8 <prvSampleTimeNow>
 8004122:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b09      	cmp	r3, #9
 8004128:	f200 8096 	bhi.w	8004258 <prvProcessReceivedCommands+0x19c>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <prvProcessReceivedCommands+0x78>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	0800415d 	.word	0x0800415d
 8004138:	0800415d 	.word	0x0800415d
 800413c:	0800415d 	.word	0x0800415d
 8004140:	080041d1 	.word	0x080041d1
 8004144:	080041e5 	.word	0x080041e5
 8004148:	0800422f 	.word	0x0800422f
 800414c:	0800415d 	.word	0x0800415d
 8004150:	0800415d 	.word	0x0800415d
 8004154:	080041d1 	.word	0x080041d1
 8004158:	080041e5 	.word	0x080041e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	18d1      	adds	r1, r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800417c:	f7ff ff5c 	bl	8004038 <prvInsertTimerInActiveList>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d069      	beq.n	800425a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800418c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d05e      	beq.n	800425a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	441a      	add	r2, r3
 80041a4:	2300      	movs	r3, #0
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	2300      	movs	r3, #0
 80041aa:	2100      	movs	r1, #0
 80041ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ae:	f7ff fe05 	bl	8003dbc <xTimerGenericCommand>
 80041b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d14f      	bne.n	800425a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	61bb      	str	r3, [r7, #24]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80041e2:	e03a      	b.n	800425a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	617b      	str	r3, [r7, #20]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	18d1      	adds	r1, r2, r3
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004228:	f7ff ff06 	bl	8004038 <prvInsertTimerInActiveList>
					break;
 800422c:	e015      	b.n	800425a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d103      	bne.n	8004244 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800423c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800423e:	f000 fcbb 	bl	8004bb8 <vPortFree>
 8004242:	e00a      	b.n	800425a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	b2da      	uxtb	r2, r3
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004256:	e000      	b.n	800425a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004258:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <prvProcessReceivedCommands+0x1c0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	1d39      	adds	r1, r7, #4
 8004260:	2200      	movs	r2, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe f912 	bl	800248c <xQueueReceive>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	f47f af2a 	bne.w	80040c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	3730      	adds	r7, #48	; 0x30
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000d98 	.word	0x20000d98

08004280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004286:	e048      	b.n	800431a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004288:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <prvSwitchTimerLists+0xc0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004292:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <prvSwitchTimerLists+0xc0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3304      	adds	r3, #4
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd fd65 	bl	8001d70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d02e      	beq.n	800431a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d90e      	bls.n	80042ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042da:	4b19      	ldr	r3, [pc, #100]	; (8004340 <prvSwitchTimerLists+0xc0>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f7fd fd0a 	bl	8001cfe <vListInsert>
 80042ea:	e016      	b.n	800431a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	2100      	movs	r1, #0
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7ff fd60 	bl	8003dbc <xTimerGenericCommand>
 80042fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	603b      	str	r3, [r7, #0]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <prvSwitchTimerLists+0xc0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1b1      	bne.n	8004288 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <prvSwitchTimerLists+0xc0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <prvSwitchTimerLists+0xc4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a04      	ldr	r2, [pc, #16]	; (8004340 <prvSwitchTimerLists+0xc0>)
 8004330:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004332:	4a04      	ldr	r2, [pc, #16]	; (8004344 <prvSwitchTimerLists+0xc4>)
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000d90 	.word	0x20000d90
 8004344:	20000d94 	.word	0x20000d94

08004348 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800434e:	f000 f969 	bl	8004624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <prvCheckForValidListAndQueue+0x60>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d120      	bne.n	800439c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800435a:	4814      	ldr	r0, [pc, #80]	; (80043ac <prvCheckForValidListAndQueue+0x64>)
 800435c:	f7fd fc7e 	bl	8001c5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004360:	4813      	ldr	r0, [pc, #76]	; (80043b0 <prvCheckForValidListAndQueue+0x68>)
 8004362:	f7fd fc7b 	bl	8001c5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <prvCheckForValidListAndQueue+0x6c>)
 8004368:	4a10      	ldr	r2, [pc, #64]	; (80043ac <prvCheckForValidListAndQueue+0x64>)
 800436a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <prvCheckForValidListAndQueue+0x70>)
 800436e:	4a10      	ldr	r2, [pc, #64]	; (80043b0 <prvCheckForValidListAndQueue+0x68>)
 8004370:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004372:	2300      	movs	r3, #0
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <prvCheckForValidListAndQueue+0x74>)
 8004378:	4a11      	ldr	r2, [pc, #68]	; (80043c0 <prvCheckForValidListAndQueue+0x78>)
 800437a:	2110      	movs	r1, #16
 800437c:	200a      	movs	r0, #10
 800437e:	f7fd fd89 	bl	8001e94 <xQueueGenericCreateStatic>
 8004382:	4603      	mov	r3, r0
 8004384:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <prvCheckForValidListAndQueue+0x60>)
 8004386:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004388:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <prvCheckForValidListAndQueue+0x60>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <prvCheckForValidListAndQueue+0x60>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	490b      	ldr	r1, [pc, #44]	; (80043c4 <prvCheckForValidListAndQueue+0x7c>)
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fb8c 	bl	8002ab4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800439c:	f000 f972 	bl	8004684 <vPortExitCritical>
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000d98 	.word	0x20000d98
 80043ac:	20000d68 	.word	0x20000d68
 80043b0:	20000d7c 	.word	0x20000d7c
 80043b4:	20000d90 	.word	0x20000d90
 80043b8:	20000d94 	.word	0x20000d94
 80043bc:	20000e44 	.word	0x20000e44
 80043c0:	20000da4 	.word	0x20000da4
 80043c4:	08005010 	.word	0x08005010

080043c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3b04      	subs	r3, #4
 80043d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3b04      	subs	r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3b04      	subs	r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043f8:	4a0c      	ldr	r2, [pc, #48]	; (800442c <pxPortInitialiseStack+0x64>)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b14      	subs	r3, #20
 8004402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3b04      	subs	r3, #4
 800440e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f06f 0202 	mvn.w	r2, #2
 8004416:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3b20      	subs	r3, #32
 800441c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800441e:	68fb      	ldr	r3, [r7, #12]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	08004431 	.word	0x08004431

08004430 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <prvTaskExitError+0x54>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d00a      	beq.n	800445a <prvTaskExitError+0x2a>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	60fb      	str	r3, [r7, #12]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <prvTaskExitError+0x28>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60bb      	str	r3, [r7, #8]
}
 800446c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800446e:	bf00      	nop
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0fc      	beq.n	8004470 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	2000000c 	.word	0x2000000c
	...

08004490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <pxCurrentTCBConst2>)
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	6808      	ldr	r0, [r1, #0]
 8004496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449a:	f380 8809 	msr	PSP, r0
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f380 8811 	msr	BASEPRI, r0
 80044aa:	4770      	bx	lr
 80044ac:	f3af 8000 	nop.w

080044b0 <pxCurrentTCBConst2>:
 80044b0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop

080044b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044b8:	4808      	ldr	r0, [pc, #32]	; (80044dc <prvPortStartFirstTask+0x24>)
 80044ba:	6800      	ldr	r0, [r0, #0]
 80044bc:	6800      	ldr	r0, [r0, #0]
 80044be:	f380 8808 	msr	MSP, r0
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f380 8814 	msr	CONTROL, r0
 80044ca:	b662      	cpsie	i
 80044cc:	b661      	cpsie	f
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	df00      	svc	0
 80044d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044da:	bf00      	nop
 80044dc:	e000ed08 	.word	0xe000ed08

080044e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <xPortStartScheduler+0x120>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a46      	ldr	r2, [pc, #280]	; (8004604 <xPortStartScheduler+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10a      	bne.n	8004506 <xPortStartScheduler+0x26>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	613b      	str	r3, [r7, #16]
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004506:	4b3e      	ldr	r3, [pc, #248]	; (8004600 <xPortStartScheduler+0x120>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <xPortStartScheduler+0x128>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10a      	bne.n	8004526 <xPortStartScheduler+0x46>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60fb      	str	r3, [r7, #12]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <xPortStartScheduler+0x12c>)
 8004528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4b31      	ldr	r3, [pc, #196]	; (8004610 <xPortStartScheduler+0x130>)
 800454c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <xPortStartScheduler+0x134>)
 8004550:	2207      	movs	r2, #7
 8004552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004554:	e009      	b.n	800456a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004556:	4b2f      	ldr	r3, [pc, #188]	; (8004614 <xPortStartScheduler+0x134>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3b01      	subs	r3, #1
 800455c:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <xPortStartScheduler+0x134>)
 800455e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b80      	cmp	r3, #128	; 0x80
 8004574:	d0ef      	beq.n	8004556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004576:	4b27      	ldr	r3, [pc, #156]	; (8004614 <xPortStartScheduler+0x134>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	d00a      	beq.n	8004598 <xPortStartScheduler+0xb8>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60bb      	str	r3, [r7, #8]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <xPortStartScheduler+0x134>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <xPortStartScheduler+0x134>)
 80045a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <xPortStartScheduler+0x134>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045aa:	4a1a      	ldr	r2, [pc, #104]	; (8004614 <xPortStartScheduler+0x134>)
 80045ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <xPortStartScheduler+0x138>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <xPortStartScheduler+0x138>)
 80045bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <xPortStartScheduler+0x138>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a14      	ldr	r2, [pc, #80]	; (8004618 <xPortStartScheduler+0x138>)
 80045c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045ce:	f000 f9a1 	bl	8004914 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <xPortStartScheduler+0x13c>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045d8:	f000 f9d8 	bl	800498c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <xPortStartScheduler+0x140>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <xPortStartScheduler+0x140>)
 80045e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045e8:	f7ff ff66 	bl	80044b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045ec:	f7fe fef2 	bl	80033d4 <vTaskSwitchContext>
	prvTaskExitError();
 80045f0:	f7ff ff1e 	bl	8004430 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	e000ed00 	.word	0xe000ed00
 8004604:	410fc271 	.word	0x410fc271
 8004608:	410fc270 	.word	0x410fc270
 800460c:	e000e400 	.word	0xe000e400
 8004610:	20000ea0 	.word	0x20000ea0
 8004614:	20000ea4 	.word	0x20000ea4
 8004618:	e000ed20 	.word	0xe000ed20
 800461c:	2000000c 	.word	0x2000000c
 8004620:	e000ef34 	.word	0xe000ef34

08004624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	607b      	str	r3, [r7, #4]
}
 800463c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <vPortEnterCritical+0x58>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <vPortEnterCritical+0x58>)
 8004646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <vPortEnterCritical+0x58>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10f      	bne.n	8004670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <vPortEnterCritical+0x5c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <vPortEnterCritical+0x4c>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	603b      	str	r3, [r7, #0]
}
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <vPortEnterCritical+0x4a>
	}
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	2000000c 	.word	0x2000000c
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800468a:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <vPortExitCritical+0x50>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <vPortExitCritical+0x24>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <vPortExitCritical+0x50>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <vPortExitCritical+0x50>)
 80046b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <vPortExitCritical+0x50>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <vPortExitCritical+0x42>
 80046ba:	2300      	movs	r3, #0
 80046bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f383 8811 	msr	BASEPRI, r3
}
 80046c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000000c 	.word	0x2000000c
	...

080046e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046e0:	f3ef 8009 	mrs	r0, PSP
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4b15      	ldr	r3, [pc, #84]	; (8004740 <pxCurrentTCBConst>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	f01e 0f10 	tst.w	lr, #16
 80046f0:	bf08      	it	eq
 80046f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	6010      	str	r0, [r2, #0]
 80046fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004704:	f380 8811 	msr	BASEPRI, r0
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f7fe fe60 	bl	80033d4 <vTaskSwitchContext>
 8004714:	f04f 0000 	mov.w	r0, #0
 8004718:	f380 8811 	msr	BASEPRI, r0
 800471c:	bc09      	pop	{r0, r3}
 800471e:	6819      	ldr	r1, [r3, #0]
 8004720:	6808      	ldr	r0, [r1, #0]
 8004722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004726:	f01e 0f10 	tst.w	lr, #16
 800472a:	bf08      	it	eq
 800472c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004730:	f380 8809 	msr	PSP, r0
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	f3af 8000 	nop.w

08004740 <pxCurrentTCBConst>:
 8004740:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
}
 8004760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004762:	f7fe fd7d 	bl	8003260 <xTaskIncrementTick>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <xPortSysTickHandler+0x40>)
 800476e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	2300      	movs	r3, #0
 8004776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f383 8811 	msr	BASEPRI, r3
}
 800477e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <vPortSuppressTicksAndSleep+0x170>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d902      	bls.n	80047a4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800479e:	4b57      	ldr	r3, [pc, #348]	; (80048fc <vPortSuppressTicksAndSleep+0x170>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80047a4:	4b56      	ldr	r3, [pc, #344]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a55      	ldr	r2, [pc, #340]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80047b0:	4b54      	ldr	r3, [pc, #336]	; (8004904 <vPortSuppressTicksAndSleep+0x178>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	4953      	ldr	r1, [pc, #332]	; (8004908 <vPortSuppressTicksAndSleep+0x17c>)
 80047ba:	6809      	ldr	r1, [r1, #0]
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 80047c4:	4b51      	ldr	r3, [pc, #324]	; (800490c <vPortSuppressTicksAndSleep+0x180>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d904      	bls.n	80047d8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 80047ce:	4b4f      	ldr	r3, [pc, #316]	; (800490c <vPortSuppressTicksAndSleep+0x180>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 80047d8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 80047da:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 80047de:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80047e2:	f7fe ffd5 	bl	8003790 <eTaskConfirmSleepModeStatus>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d110      	bne.n	800480e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80047ec:	4b45      	ldr	r3, [pc, #276]	; (8004904 <vPortSuppressTicksAndSleep+0x178>)
 80047ee:	4a48      	ldr	r2, [pc, #288]	; (8004910 <vPortSuppressTicksAndSleep+0x184>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80047f4:	4b42      	ldr	r3, [pc, #264]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a41      	ldr	r2, [pc, #260]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8004800:	4b41      	ldr	r3, [pc, #260]	; (8004908 <vPortSuppressTicksAndSleep+0x17c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a42      	ldr	r2, [pc, #264]	; (8004910 <vPortSuppressTicksAndSleep+0x184>)
 8004806:	3b01      	subs	r3, #1
 8004808:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800480a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800480c:	e071      	b.n	80048f2 <vPortSuppressTicksAndSleep+0x166>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800480e:	4a40      	ldr	r2, [pc, #256]	; (8004910 <vPortSuppressTicksAndSleep+0x184>)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004814:	4b3b      	ldr	r3, [pc, #236]	; (8004904 <vPortSuppressTicksAndSleep+0x178>)
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800481a:	4b39      	ldr	r3, [pc, #228]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a38      	ldr	r2, [pc, #224]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	613b      	str	r3, [r7, #16]
			if( xModifiableIdleTime > 0 )
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <vPortSuppressTicksAndSleep+0xae>
				__asm volatile( "dsb" ::: "memory" );
 8004830:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8004834:	bf30      	wfi
				__asm volatile( "isb" );
 8004836:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsie i" ::: "memory" );
 800483a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800483c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8004840:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8004844:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8004846:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800484a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800484e:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 8004850:	2206      	movs	r2, #6
 8004852:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8004854:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01d      	beq.n	800489c <vPortSuppressTicksAndSleep+0x110>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8004860:	4b29      	ldr	r3, [pc, #164]	; (8004908 <vPortSuppressTicksAndSleep+0x17c>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b27      	ldr	r3, [pc, #156]	; (8004904 <vPortSuppressTicksAndSleep+0x178>)
 8004866:	6819      	ldr	r1, [r3, #0]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	1acb      	subs	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	3b01      	subs	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8004872:	4b26      	ldr	r3, [pc, #152]	; (800490c <vPortSuppressTicksAndSleep+0x180>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	429a      	cmp	r2, r3
 800487a:	d304      	bcc.n	8004886 <vPortSuppressTicksAndSleep+0xfa>
 800487c:	4b22      	ldr	r3, [pc, #136]	; (8004908 <vPortSuppressTicksAndSleep+0x17c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	429a      	cmp	r2, r3
 8004884:	d903      	bls.n	800488e <vPortSuppressTicksAndSleep+0x102>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8004886:	4b20      	ldr	r3, [pc, #128]	; (8004908 <vPortSuppressTicksAndSleep+0x17c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3b01      	subs	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800488e:	4a20      	ldr	r2, [pc, #128]	; (8004910 <vPortSuppressTicksAndSleep+0x184>)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	e018      	b.n	80048ce <vPortSuppressTicksAndSleep+0x142>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800489c:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <vPortSuppressTicksAndSleep+0x17c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	fb03 f202 	mul.w	r2, r3, r2
 80048a6:	4b17      	ldr	r3, [pc, #92]	; (8004904 <vPortSuppressTicksAndSleep+0x178>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80048ae:	4b16      	ldr	r3, [pc, #88]	; (8004908 <vPortSuppressTicksAndSleep+0x17c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a12      	ldr	r2, [pc, #72]	; (8004908 <vPortSuppressTicksAndSleep+0x17c>)
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	fb03 f202 	mul.w	r2, r3, r2
 80048c6:	4912      	ldr	r1, [pc, #72]	; (8004910 <vPortSuppressTicksAndSleep+0x184>)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <vPortSuppressTicksAndSleep+0x178>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a09      	ldr	r2, [pc, #36]	; (8004900 <vPortSuppressTicksAndSleep+0x174>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 80048e0:	69b8      	ldr	r0, [r7, #24]
 80048e2:	f7fe fc95 	bl	8003210 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80048e6:	4b08      	ldr	r3, [pc, #32]	; (8004908 <vPortSuppressTicksAndSleep+0x17c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a09      	ldr	r2, [pc, #36]	; (8004910 <vPortSuppressTicksAndSleep+0x184>)
 80048ec:	3b01      	subs	r3, #1
 80048ee:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 80048f0:	b662      	cpsie	i
	}
 80048f2:	bf00      	nop
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000e98 	.word	0x20000e98
 8004900:	e000e010 	.word	0xe000e010
 8004904:	e000e018 	.word	0xe000e018
 8004908:	20000e94 	.word	0x20000e94
 800490c:	20000e9c 	.word	0x20000e9c
 8004910:	e000e014 	.word	0xe000e014

08004914 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8004918:	4b14      	ldr	r3, [pc, #80]	; (800496c <vPortSetupTimerInterrupt+0x58>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <vPortSetupTimerInterrupt+0x5c>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	4a13      	ldr	r2, [pc, #76]	; (8004974 <vPortSetupTimerInterrupt+0x60>)
 8004926:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <vPortSetupTimerInterrupt+0x60>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	4a10      	ldr	r2, [pc, #64]	; (8004978 <vPortSetupTimerInterrupt+0x64>)
 8004936:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8004938:	4b10      	ldr	r3, [pc, #64]	; (800497c <vPortSetupTimerInterrupt+0x68>)
 800493a:	222d      	movs	r2, #45	; 0x2d
 800493c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800493e:	4b10      	ldr	r3, [pc, #64]	; (8004980 <vPortSetupTimerInterrupt+0x6c>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <vPortSetupTimerInterrupt+0x70>)
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <vPortSetupTimerInterrupt+0x58>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a08      	ldr	r2, [pc, #32]	; (8004970 <vPortSetupTimerInterrupt+0x5c>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	099b      	lsrs	r3, r3, #6
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <vPortSetupTimerInterrupt+0x74>)
 8004958:	3b01      	subs	r3, #1
 800495a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <vPortSetupTimerInterrupt+0x6c>)
 800495e:	2207      	movs	r2, #7
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20000000 	.word	0x20000000
 8004970:	10624dd3 	.word	0x10624dd3
 8004974:	20000e94 	.word	0x20000e94
 8004978:	20000e98 	.word	0x20000e98
 800497c:	20000e9c 	.word	0x20000e9c
 8004980:	e000e010 	.word	0xe000e010
 8004984:	e000e018 	.word	0xe000e018
 8004988:	e000e014 	.word	0xe000e014

0800498c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800498c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800499c <vPortEnableVFP+0x10>
 8004990:	6801      	ldr	r1, [r0, #0]
 8004992:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004996:	6001      	str	r1, [r0, #0]
 8004998:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800499a:	bf00      	nop
 800499c:	e000ed88 	.word	0xe000ed88

080049a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049a6:	f3ef 8305 	mrs	r3, IPSR
 80049aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d914      	bls.n	80049dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049b2:	4a17      	ldr	r2, [pc, #92]	; (8004a10 <vPortValidateInterruptPriority+0x70>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049bc:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <vPortValidateInterruptPriority+0x74>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	7afa      	ldrb	r2, [r7, #11]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d20a      	bcs.n	80049dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	607b      	str	r3, [r7, #4]
}
 80049d8:	bf00      	nop
 80049da:	e7fe      	b.n	80049da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <vPortValidateInterruptPriority+0x78>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049e4:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <vPortValidateInterruptPriority+0x7c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d90a      	bls.n	8004a02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	603b      	str	r3, [r7, #0]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <vPortValidateInterruptPriority+0x60>
	}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	e000e3f0 	.word	0xe000e3f0
 8004a14:	20000ea0 	.word	0x20000ea0
 8004a18:	e000ed0c 	.word	0xe000ed0c
 8004a1c:	20000ea4 	.word	0x20000ea4

08004a20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08a      	sub	sp, #40	; 0x28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a2c:	f7fe fafc 	bl	8003028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a30:	4b5b      	ldr	r3, [pc, #364]	; (8004ba0 <pvPortMalloc+0x180>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a38:	f000 f920 	bl	8004c7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a3c:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <pvPortMalloc+0x184>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f040 8093 	bne.w	8004b70 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01d      	beq.n	8004a8c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a50:	2208      	movs	r2, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4413      	add	r3, r2
 8004a56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d014      	beq.n	8004a8c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f023 0307 	bic.w	r3, r3, #7
 8004a68:	3308      	adds	r3, #8
 8004a6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <pvPortMalloc+0x6c>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	617b      	str	r3, [r7, #20]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d06e      	beq.n	8004b70 <pvPortMalloc+0x150>
 8004a92:	4b45      	ldr	r3, [pc, #276]	; (8004ba8 <pvPortMalloc+0x188>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d869      	bhi.n	8004b70 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a9c:	4b43      	ldr	r3, [pc, #268]	; (8004bac <pvPortMalloc+0x18c>)
 8004a9e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004aa0:	4b42      	ldr	r3, [pc, #264]	; (8004bac <pvPortMalloc+0x18c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aa6:	e004      	b.n	8004ab2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d903      	bls.n	8004ac4 <pvPortMalloc+0xa4>
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f1      	bne.n	8004aa8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ac4:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <pvPortMalloc+0x180>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d050      	beq.n	8004b70 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	4413      	add	r3, r2
 8004ad6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	1ad2      	subs	r2, r2, r3
 8004ae8:	2308      	movs	r3, #8
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d91f      	bls.n	8004b30 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <pvPortMalloc+0xf8>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	613b      	str	r3, [r7, #16]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b2a:	69b8      	ldr	r0, [r7, #24]
 8004b2c:	f000 f908 	bl	8004d40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <pvPortMalloc+0x188>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <pvPortMalloc+0x188>)
 8004b3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <pvPortMalloc+0x188>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <pvPortMalloc+0x190>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d203      	bcs.n	8004b52 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b4a:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <pvPortMalloc+0x188>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <pvPortMalloc+0x190>)
 8004b50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <pvPortMalloc+0x184>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b66:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <pvPortMalloc+0x194>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <pvPortMalloc+0x194>)
 8004b6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b70:	f7fe faa0 	bl	80030b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <pvPortMalloc+0x174>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	60fb      	str	r3, [r7, #12]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <pvPortMalloc+0x172>
	return pvReturn;
 8004b94:	69fb      	ldr	r3, [r7, #28]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3728      	adds	r7, #40	; 0x28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20001a68 	.word	0x20001a68
 8004ba4:	20001a7c 	.word	0x20001a7c
 8004ba8:	20001a6c 	.word	0x20001a6c
 8004bac:	20001a60 	.word	0x20001a60
 8004bb0:	20001a70 	.word	0x20001a70
 8004bb4:	20001a74 	.word	0x20001a74

08004bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04d      	beq.n	8004c66 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bca:	2308      	movs	r3, #8
 8004bcc:	425b      	negs	r3, r3
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <vPortFree+0xb8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <vPortFree+0x44>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60fb      	str	r3, [r7, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <vPortFree+0x62>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60bb      	str	r3, [r7, #8]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <vPortFree+0xb8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01e      	beq.n	8004c66 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d11a      	bne.n	8004c66 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <vPortFree+0xb8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c40:	f7fe f9f2 	bl	8003028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <vPortFree+0xbc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <vPortFree+0xbc>)
 8004c50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c52:	6938      	ldr	r0, [r7, #16]
 8004c54:	f000 f874 	bl	8004d40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <vPortFree+0xc0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	4a06      	ldr	r2, [pc, #24]	; (8004c78 <vPortFree+0xc0>)
 8004c60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c62:	f7fe fa27 	bl	80030b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c66:	bf00      	nop
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20001a7c 	.word	0x20001a7c
 8004c74:	20001a6c 	.word	0x20001a6c
 8004c78:	20001a78 	.word	0x20001a78

08004c7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c82:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004c86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c88:	4b27      	ldr	r3, [pc, #156]	; (8004d28 <prvHeapInit+0xac>)
 8004c8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00c      	beq.n	8004cb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3307      	adds	r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <prvHeapInit+0xac>)
 8004cac:	4413      	add	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cb4:	4a1d      	ldr	r2, [pc, #116]	; (8004d2c <prvHeapInit+0xb0>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cba:	4b1c      	ldr	r3, [pc, #112]	; (8004d2c <prvHeapInit+0xb0>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cc8:	2208      	movs	r2, #8
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0307 	bic.w	r3, r3, #7
 8004cd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <prvHeapInit+0xb4>)
 8004cdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cde:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <prvHeapInit+0xb4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ce6:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <prvHeapInit+0xb4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <prvHeapInit+0xb4>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <prvHeapInit+0xb8>)
 8004d0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <prvHeapInit+0xbc>)
 8004d12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d14:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <prvHeapInit+0xc0>)
 8004d16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d1a:	601a      	str	r2, [r3, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	20000ea8 	.word	0x20000ea8
 8004d2c:	20001a60 	.word	0x20001a60
 8004d30:	20001a68 	.word	0x20001a68
 8004d34:	20001a70 	.word	0x20001a70
 8004d38:	20001a6c 	.word	0x20001a6c
 8004d3c:	20001a7c 	.word	0x20001a7c

08004d40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <prvInsertBlockIntoFreeList+0xac>)
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e002      	b.n	8004d54 <prvInsertBlockIntoFreeList+0x14>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d8f7      	bhi.n	8004d4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4413      	add	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d108      	bne.n	8004d82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	441a      	add	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	441a      	add	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d118      	bne.n	8004dc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d00d      	beq.n	8004dbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e008      	b.n	8004dd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e003      	b.n	8004dd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d002      	beq.n	8004dde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20001a60 	.word	0x20001a60
 8004df0:	20001a68 	.word	0x20001a68

08004df4 <memset>:
 8004df4:	4402      	add	r2, r0
 8004df6:	4603      	mov	r3, r0
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d100      	bne.n	8004dfe <memset+0xa>
 8004dfc:	4770      	bx	lr
 8004dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004e02:	e7f9      	b.n	8004df8 <memset+0x4>

08004e04 <_reclaim_reent>:
 8004e04:	4b29      	ldr	r3, [pc, #164]	; (8004eac <_reclaim_reent+0xa8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4283      	cmp	r3, r0
 8004e0a:	b570      	push	{r4, r5, r6, lr}
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	d04b      	beq.n	8004ea8 <_reclaim_reent+0xa4>
 8004e10:	69c3      	ldr	r3, [r0, #28]
 8004e12:	b143      	cbz	r3, 8004e26 <_reclaim_reent+0x22>
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d144      	bne.n	8004ea4 <_reclaim_reent+0xa0>
 8004e1a:	69e3      	ldr	r3, [r4, #28]
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	b111      	cbz	r1, 8004e26 <_reclaim_reent+0x22>
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 f879 	bl	8004f18 <_free_r>
 8004e26:	6961      	ldr	r1, [r4, #20]
 8004e28:	b111      	cbz	r1, 8004e30 <_reclaim_reent+0x2c>
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f000 f874 	bl	8004f18 <_free_r>
 8004e30:	69e1      	ldr	r1, [r4, #28]
 8004e32:	b111      	cbz	r1, 8004e3a <_reclaim_reent+0x36>
 8004e34:	4620      	mov	r0, r4
 8004e36:	f000 f86f 	bl	8004f18 <_free_r>
 8004e3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e3c:	b111      	cbz	r1, 8004e44 <_reclaim_reent+0x40>
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f000 f86a 	bl	8004f18 <_free_r>
 8004e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e46:	b111      	cbz	r1, 8004e4e <_reclaim_reent+0x4a>
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f000 f865 	bl	8004f18 <_free_r>
 8004e4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e50:	b111      	cbz	r1, 8004e58 <_reclaim_reent+0x54>
 8004e52:	4620      	mov	r0, r4
 8004e54:	f000 f860 	bl	8004f18 <_free_r>
 8004e58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004e5a:	b111      	cbz	r1, 8004e62 <_reclaim_reent+0x5e>
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 f85b 	bl	8004f18 <_free_r>
 8004e62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004e64:	b111      	cbz	r1, 8004e6c <_reclaim_reent+0x68>
 8004e66:	4620      	mov	r0, r4
 8004e68:	f000 f856 	bl	8004f18 <_free_r>
 8004e6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e6e:	b111      	cbz	r1, 8004e76 <_reclaim_reent+0x72>
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 f851 	bl	8004f18 <_free_r>
 8004e76:	6a23      	ldr	r3, [r4, #32]
 8004e78:	b1b3      	cbz	r3, 8004ea8 <_reclaim_reent+0xa4>
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e80:	4718      	bx	r3
 8004e82:	5949      	ldr	r1, [r1, r5]
 8004e84:	b941      	cbnz	r1, 8004e98 <_reclaim_reent+0x94>
 8004e86:	3504      	adds	r5, #4
 8004e88:	69e3      	ldr	r3, [r4, #28]
 8004e8a:	2d80      	cmp	r5, #128	; 0x80
 8004e8c:	68d9      	ldr	r1, [r3, #12]
 8004e8e:	d1f8      	bne.n	8004e82 <_reclaim_reent+0x7e>
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 f841 	bl	8004f18 <_free_r>
 8004e96:	e7c0      	b.n	8004e1a <_reclaim_reent+0x16>
 8004e98:	680e      	ldr	r6, [r1, #0]
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f000 f83c 	bl	8004f18 <_free_r>
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	e7ef      	b.n	8004e84 <_reclaim_reent+0x80>
 8004ea4:	2500      	movs	r5, #0
 8004ea6:	e7ef      	b.n	8004e88 <_reclaim_reent+0x84>
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
 8004eaa:	bf00      	nop
 8004eac:	2000005c 	.word	0x2000005c

08004eb0 <__libc_init_array>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	4d0d      	ldr	r5, [pc, #52]	; (8004ee8 <__libc_init_array+0x38>)
 8004eb4:	4c0d      	ldr	r4, [pc, #52]	; (8004eec <__libc_init_array+0x3c>)
 8004eb6:	1b64      	subs	r4, r4, r5
 8004eb8:	10a4      	asrs	r4, r4, #2
 8004eba:	2600      	movs	r6, #0
 8004ebc:	42a6      	cmp	r6, r4
 8004ebe:	d109      	bne.n	8004ed4 <__libc_init_array+0x24>
 8004ec0:	4d0b      	ldr	r5, [pc, #44]	; (8004ef0 <__libc_init_array+0x40>)
 8004ec2:	4c0c      	ldr	r4, [pc, #48]	; (8004ef4 <__libc_init_array+0x44>)
 8004ec4:	f000 f880 	bl	8004fc8 <_init>
 8004ec8:	1b64      	subs	r4, r4, r5
 8004eca:	10a4      	asrs	r4, r4, #2
 8004ecc:	2600      	movs	r6, #0
 8004ece:	42a6      	cmp	r6, r4
 8004ed0:	d105      	bne.n	8004ede <__libc_init_array+0x2e>
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed8:	4798      	blx	r3
 8004eda:	3601      	adds	r6, #1
 8004edc:	e7ee      	b.n	8004ebc <__libc_init_array+0xc>
 8004ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee2:	4798      	blx	r3
 8004ee4:	3601      	adds	r6, #1
 8004ee6:	e7f2      	b.n	8004ece <__libc_init_array+0x1e>
 8004ee8:	08005060 	.word	0x08005060
 8004eec:	08005060 	.word	0x08005060
 8004ef0:	08005060 	.word	0x08005060
 8004ef4:	08005064 	.word	0x08005064

08004ef8 <__retarget_lock_acquire_recursive>:
 8004ef8:	4770      	bx	lr

08004efa <__retarget_lock_release_recursive>:
 8004efa:	4770      	bx	lr

08004efc <memcpy>:
 8004efc:	440a      	add	r2, r1
 8004efe:	4291      	cmp	r1, r2
 8004f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f04:	d100      	bne.n	8004f08 <memcpy+0xc>
 8004f06:	4770      	bx	lr
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f12:	4291      	cmp	r1, r2
 8004f14:	d1f9      	bne.n	8004f0a <memcpy+0xe>
 8004f16:	bd10      	pop	{r4, pc}

08004f18 <_free_r>:
 8004f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	d044      	beq.n	8004fa8 <_free_r+0x90>
 8004f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f22:	9001      	str	r0, [sp, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f1a1 0404 	sub.w	r4, r1, #4
 8004f2a:	bfb8      	it	lt
 8004f2c:	18e4      	addlt	r4, r4, r3
 8004f2e:	f000 f83f 	bl	8004fb0 <__malloc_lock>
 8004f32:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <_free_r+0x94>)
 8004f34:	9801      	ldr	r0, [sp, #4]
 8004f36:	6813      	ldr	r3, [r2, #0]
 8004f38:	b933      	cbnz	r3, 8004f48 <_free_r+0x30>
 8004f3a:	6063      	str	r3, [r4, #4]
 8004f3c:	6014      	str	r4, [r2, #0]
 8004f3e:	b003      	add	sp, #12
 8004f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f44:	f000 b83a 	b.w	8004fbc <__malloc_unlock>
 8004f48:	42a3      	cmp	r3, r4
 8004f4a:	d908      	bls.n	8004f5e <_free_r+0x46>
 8004f4c:	6825      	ldr	r5, [r4, #0]
 8004f4e:	1961      	adds	r1, r4, r5
 8004f50:	428b      	cmp	r3, r1
 8004f52:	bf01      	itttt	eq
 8004f54:	6819      	ldreq	r1, [r3, #0]
 8004f56:	685b      	ldreq	r3, [r3, #4]
 8004f58:	1949      	addeq	r1, r1, r5
 8004f5a:	6021      	streq	r1, [r4, #0]
 8004f5c:	e7ed      	b.n	8004f3a <_free_r+0x22>
 8004f5e:	461a      	mov	r2, r3
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	b10b      	cbz	r3, 8004f68 <_free_r+0x50>
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	d9fa      	bls.n	8004f5e <_free_r+0x46>
 8004f68:	6811      	ldr	r1, [r2, #0]
 8004f6a:	1855      	adds	r5, r2, r1
 8004f6c:	42a5      	cmp	r5, r4
 8004f6e:	d10b      	bne.n	8004f88 <_free_r+0x70>
 8004f70:	6824      	ldr	r4, [r4, #0]
 8004f72:	4421      	add	r1, r4
 8004f74:	1854      	adds	r4, r2, r1
 8004f76:	42a3      	cmp	r3, r4
 8004f78:	6011      	str	r1, [r2, #0]
 8004f7a:	d1e0      	bne.n	8004f3e <_free_r+0x26>
 8004f7c:	681c      	ldr	r4, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	6053      	str	r3, [r2, #4]
 8004f82:	440c      	add	r4, r1
 8004f84:	6014      	str	r4, [r2, #0]
 8004f86:	e7da      	b.n	8004f3e <_free_r+0x26>
 8004f88:	d902      	bls.n	8004f90 <_free_r+0x78>
 8004f8a:	230c      	movs	r3, #12
 8004f8c:	6003      	str	r3, [r0, #0]
 8004f8e:	e7d6      	b.n	8004f3e <_free_r+0x26>
 8004f90:	6825      	ldr	r5, [r4, #0]
 8004f92:	1961      	adds	r1, r4, r5
 8004f94:	428b      	cmp	r3, r1
 8004f96:	bf04      	itt	eq
 8004f98:	6819      	ldreq	r1, [r3, #0]
 8004f9a:	685b      	ldreq	r3, [r3, #4]
 8004f9c:	6063      	str	r3, [r4, #4]
 8004f9e:	bf04      	itt	eq
 8004fa0:	1949      	addeq	r1, r1, r5
 8004fa2:	6021      	streq	r1, [r4, #0]
 8004fa4:	6054      	str	r4, [r2, #4]
 8004fa6:	e7ca      	b.n	8004f3e <_free_r+0x26>
 8004fa8:	b003      	add	sp, #12
 8004faa:	bd30      	pop	{r4, r5, pc}
 8004fac:	20001bbc 	.word	0x20001bbc

08004fb0 <__malloc_lock>:
 8004fb0:	4801      	ldr	r0, [pc, #4]	; (8004fb8 <__malloc_lock+0x8>)
 8004fb2:	f7ff bfa1 	b.w	8004ef8 <__retarget_lock_acquire_recursive>
 8004fb6:	bf00      	nop
 8004fb8:	20001bb8 	.word	0x20001bb8

08004fbc <__malloc_unlock>:
 8004fbc:	4801      	ldr	r0, [pc, #4]	; (8004fc4 <__malloc_unlock+0x8>)
 8004fbe:	f7ff bf9c 	b.w	8004efa <__retarget_lock_release_recursive>
 8004fc2:	bf00      	nop
 8004fc4:	20001bb8 	.word	0x20001bb8

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
